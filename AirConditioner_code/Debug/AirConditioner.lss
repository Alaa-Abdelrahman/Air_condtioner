
AirConditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00002dea  00002e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008001a4  008001a4  00002fc2  2**0
                  ALLOC
  3 .stab         00002f28  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000184b  00000000  00000000  00005eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007737  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000078d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b25a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c430  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <main>
      8a:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e7       	ldi	r22, 0x7C	; 124
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 57       	subi	r30, 0x7C	; 124
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
 * @return  void

  **************************************************************************************************************************/

void ADC_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,ADMUX_REFS1);
#elif ADC_VOLT_REFRENCE == ADC_V_REF_EXTERNAL
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
#elif ADC_VOLT_REFRENCE == ADC_V_REF_INTERNAL
	SET_BIT(ADMUX,ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24
#endif

	/*define status of left adjust result */
#if	LEFT_ADJUST_RESULT == SET
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#elif	LEFT_ADJUST_RESULT == CLEAR
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#endif

	/*define prescaler */
	ADCSRA &= CLK_MASK;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA |= ADC_CLK_SRC;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	87 60       	ori	r24, 0x07	; 7
     e7a:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <ADC_u8StartConversionSync>:
 *@return  error state

  **************************************************************************************************************************/

uint8_t ADC_u8StartConversionSync(uint8_t Copy_u8Channel,uint8_t *Copy_pu8Reading)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <ADC_u8StartConversionSync+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <ADC_u8StartConversionSync+0x8>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ADC_u8StartConversionSync+0xa>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	8c 83       	std	Y+4, r24	; 0x04
     ea0:	7e 83       	std	Y+6, r23	; 0x06
     ea2:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t Local_u8Errorstatus=1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	8b 83       	std	Y+3, r24	; 0x03
	uint32 Local_u32Counter=0;
     ea8:	1a 82       	std	Y+2, r1	; 0x02
     eaa:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the MUX bits in ADMUX register */
	ADMUX&=ADMUX_MASK;
     eac:	a7 e2       	ldi	r26, 0x27	; 39
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e7 e2       	ldi	r30, 0x27	; 39
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 7e       	andi	r24, 0xE0	; 224
     eb8:	8c 93       	st	X, r24

	/*Set the required channel into MUX bits*/
	ADMUX|=Copy_u8Channel;
     eba:	a7 e2       	ldi	r26, 0x27	; 39
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e2       	ldi	r30, 0x27	; 39
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	90 81       	ld	r25, Z
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	89 2b       	or	r24, r25
     ec8:	8c 93       	st	X, r24

	/*Start conversion */
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     eca:	a6 e2       	ldi	r26, 0x26	; 38
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e6 e2       	ldi	r30, 0x26	; 38
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	8c 93       	st	X, r24
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <ADC_u8StartConversionSync+0x54>

	/* Polling (busyWAting )until the conversion complete flag is set */
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)== 0 && Local_u32Counter== ADC_u32TIMEOUT)
	{
		Local_u32Counter++;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01

	/*Start conversion */
	SET_BIT(ADCSRA,ADCSRA_ADSC);

	/* Polling (busyWAting )until the conversion complete flag is set */
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)== 0 && Local_u32Counter== ADC_u32TIMEOUT)
     ee4:	e6 e2       	ldi	r30, 0x26	; 38
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 95       	swap	r24
     eec:	8f 70       	andi	r24, 0x0F	; 15
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	81 70       	andi	r24, 0x01	; 1
     ef4:	90 70       	andi	r25, 0x00	; 0
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	31 f4       	brne	.+12     	; 0xf06 <ADC_u8StartConversionSync+0x76>
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	27 e2       	ldi	r18, 0x27	; 39
     f00:	80 31       	cpi	r24, 0x10	; 16
     f02:	92 07       	cpc	r25, r18
     f04:	51 f3       	breq	.-44     	; 0xeda <ADC_u8StartConversionSync+0x4a>
	{
		Local_u32Counter++;
	}
	if(Local_u32Counter == ADC_u32TIMEOUT)
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	27 e2       	ldi	r18, 0x27	; 39
     f0c:	80 31       	cpi	r24, 0x10	; 16
     f0e:	92 07       	cpc	r25, r18
     f10:	11 f4       	brne	.+4      	; 0xf16 <ADC_u8StartConversionSync+0x86>
	{
		// loop is broken because the timeout is reached*/
		Local_u8Errorstatus = 0;
     f12:	1b 82       	std	Y+3, r1	; 0x03
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <ADC_u8StartConversionSync+0xa0>
	}
	else
	{
		/*loop is broken because flag is raised*/
		/*Clear the conversion  compete flag*/
		SET_BIT(ADCSRA,ADCSRA_ADIF);
     f16:	a6 e2       	ldi	r26, 0x26	; 38
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e6 e2       	ldi	r30, 0x26	; 38
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	8c 93       	st	X, r24


		/*read the result*/
		*Copy_pu8Reading =  ADCH;
     f24:	e5 e2       	ldi	r30, 0x25	; 37
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	ed 81       	ldd	r30, Y+5	; 0x05
     f2c:	fe 81       	ldd	r31, Y+6	; 0x06
     f2e:	80 83       	st	Z, r24
	}

	return Local_u8Errorstatus;
     f30:	8b 81       	ldd	r24, Y+3	; 0x03


}
     f32:	26 96       	adiw	r28, 0x06	; 6
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <ADC_u8StartConversionAsync>:
 *@return  error state

  **************************************************************************************************************************/

uint8_t ADC_u8StartConversionAsync(uint8_t Copy_u8Channel,uint8_t *Copy_pu8Reading,void(*Copy_pvNotification(void)))
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	27 97       	sbiw	r28, 0x07	; 7
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	7c 83       	std	Y+4, r23	; 0x04
     f5c:	6b 83       	std	Y+3, r22	; 0x03
     f5e:	5e 83       	std	Y+6, r21	; 0x06
     f60:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t Local_u8ErrorState = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState != BUSY)
     f66:	80 91 84 01 	lds	r24, 0x0184
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	e1 f1       	breq	.+120    	; 0xfe6 <ADC_u8StartConversionAsync+0xa2>
	{

		if((Copy_pu8Reading == NULL)||(Copy_pvNotification == NULL))
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	21 f0       	breq	.+8      	; 0xf7e <ADC_u8StartConversionAsync+0x3a>
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	11 f4       	brne	.+4      	; 0xf82 <ADC_u8StartConversionAsync+0x3e>
		{
			Local_u8ErrorState = 0;
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	2f c0       	rjmp	.+94     	; 0xfe0 <ADC_u8StartConversionAsync+0x9c>
		}
		else
		{
			/* make ADC Busy*/
			ADC_u8BusyState = BUSY;
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	80 93 84 01 	sts	0x0184, r24

			/*MAKE ISR SOURCE : SINGLE CHANNEL ASYNCHROUNOUS */
			ADC_u8ISRSource = SINGLE_CHANNEL;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 ae 01 	sts	0x01AE, r24

			/*initailize reading values globally*/

			ADC_pu8Reading = Copy_pu8Reading;
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	90 93 ac 01 	sts	0x01AC, r25
     f96:	80 93 ab 01 	sts	0x01AB, r24

			/*Initialize callback function  globally*/
			ADC_pvCallBackNotification = Copy_pvNotification;
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	90 93 a5 01 	sts	0x01A5, r25
     fa2:	80 93 a4 01 	sts	0x01A4, r24

			/*Clear the MUX bits in ADMUX register */
			ADMUX&=ADMUX_MASK;
     fa6:	a7 e2       	ldi	r26, 0x27	; 39
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e2       	ldi	r30, 0x27	; 39
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 7e       	andi	r24, 0xE0	; 224
     fb2:	8c 93       	st	X, r24

			/*Set the required channel into MUX bits*/
			ADMUX|=Copy_u8Channel;
     fb4:	a7 e2       	ldi	r26, 0x27	; 39
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e2       	ldi	r30, 0x27	; 39
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24

			/*Start conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     fc4:	a6 e2       	ldi	r26, 0x26	; 38
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e2       	ldi	r30, 0x26	; 38
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 64       	ori	r24, 0x40	; 64
     fd0:	8c 93       	st	X, r24

			/*Enable Interrupt */

			SET_BIT(ADCSRA,ADCSRA_ADIE);
     fd2:	a6 e2       	ldi	r26, 0x26	; 38
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e6 e2       	ldi	r30, 0x26	; 38
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8c 93       	st	X, r24
	}
	else
	{
		return Local_u8ErrorState = 3;
	}
	return Local_u8ErrorState;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	8f 83       	std	Y+7, r24	; 0x07
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <ADC_u8StartConversionAsync+0xaa>
			SET_BIT(ADCSRA,ADCSRA_ADIE);
		}
	}
	else
	{
		return Local_u8ErrorState = 3;
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	8f 83       	std	Y+7, r24	; 0x07
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
	}
	return Local_u8ErrorState;
}
     ff0:	27 96       	adiw	r28, 0x07	; 7
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <ADC_u8StartChainAsync>:


uint8_t ADC_u8StartChainAsync(Chain_t * Copy_Chain)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <ADC_u8StartChainAsync+0x6>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9b 83       	std	Y+3, r25	; 0x03
    1010:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8ErrorState =1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	89 83       	std	Y+1, r24	; 0x01

	/*check Null Pointer */
	if(Copy_Chain == NULL)
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9b 81       	ldd	r25, Y+3	; 0x03
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	09 f4       	brne	.+2      	; 0x1020 <ADC_u8StartChainAsync+0x1e>
	{
		Local_u8ErrorState = 0;
    101e:	19 82       	std	Y+1, r1	; 0x01
	}
	if(ADC_u8BusyState == IDLE )
    1020:	80 91 84 01 	lds	r24, 0x0184
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	09 f0       	breq	.+2      	; 0x102a <ADC_u8StartChainAsync+0x28>
    1028:	4a c0       	rjmp	.+148    	; 0x10be <ADC_u8StartChainAsync+0xbc>
	{

		/* make ADC Busy*/
		ADC_u8BusyState = BUSY;
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	80 93 84 01 	sts	0x0184, r24

		/*INTIALIZE CHAIN CHANEEL ARRAY */
		ADC_pu8ChainChannelArr = Copy_Chain->Channel;
    1030:	ea 81       	ldd	r30, Y+2	; 0x02
    1032:	fb 81       	ldd	r31, Y+3	; 0x03
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	90 93 a7 01 	sts	0x01A7, r25
    103c:	80 93 a6 01 	sts	0x01A6, r24

		/*iNTAILZE RESULT ARRAY*/

		ADC_pu8ChainResultArr = Copy_Chain->Result;
    1040:	ea 81       	ldd	r30, Y+2	; 0x02
    1042:	fb 81       	ldd	r31, Y+3	; 0x03
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	90 93 a9 01 	sts	0x01A9, r25
    104c:	80 93 a8 01 	sts	0x01A8, r24

		/* INTIALIZE CHAIN SIZE */
		ADC_u8ChainSize = Copy_Chain->Size;
    1050:	ea 81       	ldd	r30, Y+2	; 0x02
    1052:	fb 81       	ldd	r31, Y+3	; 0x03
    1054:	84 81       	ldd	r24, Z+4	; 0x04
    1056:	80 93 ad 01 	sts	0x01AD, r24

		/* INTIALIZE CHAIN SIZE */
		ADC_pvCallBackNotification = Copy_Chain->NotificationFunc;
    105a:	ea 81       	ldd	r30, Y+2	; 0x02
    105c:	fb 81       	ldd	r31, Y+3	; 0x03
    105e:	85 81       	ldd	r24, Z+5	; 0x05
    1060:	96 81       	ldd	r25, Z+6	; 0x06
    1062:	90 93 a5 01 	sts	0x01A5, r25
    1066:	80 93 a4 01 	sts	0x01A4, r24

		/* INTIALIZE index with zero */

		ADC_u8Index = 0;
    106a:	10 92 aa 01 	sts	0x01AA, r1

		/*Set required channel*/
		ADMUX &= ADMUX_MASK;
    106e:	a7 e2       	ldi	r26, 0x27	; 39
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e2       	ldi	r30, 0x27	; 39
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 7e       	andi	r24, 0xE0	; 224
    107a:	8c 93       	st	X, r24
		ADMUX|=ADC_pu8ChainChannelArr[ADC_u8Index];
    107c:	a7 e2       	ldi	r26, 0x27	; 39
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e2       	ldi	r30, 0x27	; 39
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	40 81       	ld	r20, Z
    1086:	20 91 a6 01 	lds	r18, 0x01A6
    108a:	30 91 a7 01 	lds	r19, 0x01A7
    108e:	80 91 aa 01 	lds	r24, 0x01AA
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	e8 0f       	add	r30, r24
    109a:	f9 1f       	adc	r31, r25
    109c:	80 81       	ld	r24, Z
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24

		/*start conversion */
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    10a2:	a6 e2       	ldi	r26, 0x26	; 38
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e6 e2       	ldi	r30, 0x26	; 38
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	8c 93       	st	X, r24
		/* enable conversion complete interrupt */
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    10b0:	a6 e2       	ldi	r26, 0x26	; 38
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e6 e2       	ldi	r30, 0x26	; 38
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	80 64       	ori	r24, 0x40	; 64
    10bc:	8c 93       	st	X, r24

	}

	return Local_u8ErrorState;
    10be:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <__vector_16>:
/**
 * interrupt vector for ADC
 */
void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62


	/*Read ADC result */
	*ADC_pu8Reading = ADCH;
    10f6:	a0 91 ab 01 	lds	r26, 0x01AB
    10fa:	b0 91 ac 01 	lds	r27, 0x01AC
    10fe:	e5 e2       	ldi	r30, 0x25	; 37
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8c 93       	st	X, r24
	/*ADC return IDLE because it is finished */
	ADC_u8BusyState = IDLE;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 84 01 	sts	0x0184, r24

	/*Invoking the callback notification function */

	ADC_pvCallBackNotification();
    110c:	e0 91 a4 01 	lds	r30, 0x01A4
    1110:	f0 91 a5 01 	lds	r31, 0x01A5
    1114:	09 95       	icall

	/*Disable ADC conversion complete interrupt */

	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1116:	a6 e2       	ldi	r26, 0x26	; 38
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e6 e2       	ldi	r30, 0x26	; 38
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	87 7f       	andi	r24, 0xF7	; 247
    1122:	8c 93       	st	X, r24

}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	ff 91       	pop	r31
    112a:	ef 91       	pop	r30
    112c:	bf 91       	pop	r27
    112e:	af 91       	pop	r26
    1130:	9f 91       	pop	r25
    1132:	8f 91       	pop	r24
    1134:	7f 91       	pop	r23
    1136:	6f 91       	pop	r22
    1138:	5f 91       	pop	r21
    113a:	4f 91       	pop	r20
    113c:	3f 91       	pop	r19
    113e:	2f 91       	pop	r18
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <App_SetTemp>:
Motor_Config_t fan = {PORTD,PIN6,PIN7,CHANNEL_A};

static uint8_t desiredTemp = 30;
static uint8_t currentTemp = 10;

void App_SetTemp(){
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62

	uint8_t PressedKey = 0;
    1154:	19 82       	std	Y+1, r1	; 0x01
	static uint8_t Temp = 0;


	/*read the pressed key*/
	PressedKey= KPD_u8GetPressedKey();
    1156:	0e 94 69 13 	call	0x26d2	; 0x26d2 <KPD_u8GetPressedKey>
    115a:	89 83       	std	Y+1, r24	; 0x01

	if(PressedKey == '=')
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	8d 33       	cpi	r24, 0x3D	; 61
    1160:	39 f4       	brne	.+14     	; 0x1170 <App_SetTemp+0x26>
	{
		/*set the Desired Temp*/
		desiredTemp = Temp;
    1162:	80 91 af 01 	lds	r24, 0x01AF
    1166:	80 93 89 01 	sts	0x0189, r24
		Temp = 0;
    116a:	10 92 af 01 	sts	0x01AF, r1
    116e:	20 c0       	rjmp	.+64     	; 0x11b0 <App_SetTemp+0x66>
		return;
	}
	else if (PressedKey == KPD_NO_PRESSED_KEY){
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	8f 3f       	cpi	r24, 0xFF	; 255
    1174:	e9 f0       	breq	.+58     	; 0x11b0 <App_SetTemp+0x66>
		return;
	}
	else{

		/*take temperature from the user */
		Temp =Temp*10+ PressedKey;
    1176:	80 91 af 01 	lds	r24, 0x01AF
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9c 01       	movw	r18, r24
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	c9 01       	movw	r24, r18
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	82 0f       	add	r24, r18
    1190:	93 1f       	adc	r25, r19
    1192:	98 2f       	mov	r25, r24
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	89 0f       	add	r24, r25
    1198:	80 93 af 01 	sts	0x01AF, r24
		CLCD_voidGoToXY(1,10);
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	6a e0       	ldi	r22, 0x0A	; 10
    11a0:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <CLCD_voidGoToXY>
		CLCD_voidSendNumber(Temp);
    11a4:	80 91 af 01 	lds	r24, 0x01AF
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <CLCD_voidSendNumber>
	}

}
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <App_Display>:




void App_Display(){
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62

	CLCD_Clear();
    11c0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <CLCD_Clear>
	CLCD_voidSendString("Curr TEMP: ");
    11c4:	80 e6       	ldi	r24, 0x60	; 96
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <CLCD_voidSendString>
	CLCD_voidGoToXY(0,10);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	6a e0       	ldi	r22, 0x0A	; 10
    11d0:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <CLCD_voidGoToXY>
	CLCD_voidSendNumber(currentTemp);
    11d4:	80 91 8a 01 	lds	r24, 0x018A
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <CLCD_voidSendNumber>
	CLCD_voidGoToXY(1,0);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <CLCD_voidGoToXY>
	CLCD_voidSendString("Set  TEMP:    C");
    11e8:	8c e6       	ldi	r24, 0x6C	; 108
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,10);
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	6a e0       	ldi	r22, 0x0A	; 10
    11f4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <CLCD_voidGoToXY>
	CLCD_voidSendNumber(desiredTemp);
    11f8:	80 91 89 01 	lds	r24, 0x0189
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <CLCD_voidSendNumber>



}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <App_GetStausOfTemp>:

void App_GetStausOfTemp(){
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62

	/*get the current state of temperature */
	LM35_u8GetTempSync(ADC_CH0,&currentTemp);
    1212:	2a e8       	ldi	r18, 0x8A	; 138
    1214:	31 e0       	ldi	r19, 0x01	; 1
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	b9 01       	movw	r22, r18
    121a:	0e 94 af 14 	call	0x295e	; 0x295e <LM35_u8GetTempSync>

	CLCD_voidGoToXY(0,10);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	6a e0       	ldi	r22, 0x0A	; 10
    1222:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <CLCD_voidGoToXY>
	CLCD_voidSendNumber(currentTemp);
    1226:	80 91 8a 01 	lds	r24, 0x018A
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <CLCD_voidSendNumber>

}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <App_ControlFan>:
void App_ControlFan(){
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62

	if(currentTemp >desiredTemp)
    1240:	90 91 8a 01 	lds	r25, 0x018A
    1244:	80 91 89 01 	lds	r24, 0x0189
    1248:	89 17       	cp	r24, r25
    124a:	30 f4       	brcc	.+12     	; 0x1258 <App_ControlFan+0x20>
	{
		L298_runMotorCW(&fan,100);
    124c:	85 e8       	ldi	r24, 0x85	; 133
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	64 e6       	ldi	r22, 0x64	; 100
    1252:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <L298_runMotorCW>
    1256:	0a c0       	rjmp	.+20     	; 0x126c <App_ControlFan+0x34>
	}
	else if(currentTemp <= desiredTemp)
    1258:	90 91 8a 01 	lds	r25, 0x018A
    125c:	80 91 89 01 	lds	r24, 0x0189
    1260:	89 17       	cp	r24, r25
    1262:	20 f0       	brcs	.+8      	; 0x126c <App_ControlFan+0x34>
	{
		L298_stopMotor(&fan);
    1264:	85 e8       	ldi	r24, 0x85	; 133
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 83 14 	call	0x2906	; 0x2906 <L298_stopMotor>
	}
}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <App_Init>:

void App_Init(){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62

	/*Initialize the components of Project*/
	PORT_voidInit();
    127a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <PORT_voidInit>

	ADC_voidInit();
    127e:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>

	/*Initialize LCD*/
	CLCD_voidInit();
    1282:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <CLCD_voidInit>

	PWM_Init();
    1286:	0e 94 ff 14 	call	0x29fe	; 0x29fe <PWM_Init>

	App_Display();
    128a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <App_Display>

}
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <App_Update>:


void App_Update(){
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62


	/*set desired Temp*/
	App_SetTemp();
    129c:	0e 94 a5 08 	call	0x114a	; 0x114a <App_SetTemp>

	/*check current temperature degree */
	App_GetStausOfTemp();
    12a0:	0e 94 05 09 	call	0x120a	; 0x120a <App_GetStausOfTemp>

	/*control the fan based on degree*/
	App_ControlFan();
    12a4:	0e 94 1c 09 	call	0x1238	; 0x1238 <App_ControlFan>




}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <CLCD_voidSend4BitCommand>:
#include "CLCD_private.h"




void CLCD_voidSend4BitCommand(uint8_t Copy_u8Command){
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	6e 97       	sbiw	r28, 0x1e	; 30
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	8e 8f       	std	Y+30, r24	; 0x1e

	/* store the 4 MSB to send first */
	uint8_t Local_Cmd = Copy_u8Command & MODE_4BIT_MASK;
    12c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c6:	80 7f       	andi	r24, 0xF0	; 240
    12c8:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS pin to low for command */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    12d4:	83 e0       	ldi	r24, 0x03	; 3
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Cmd);
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12e2:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	62 e0       	ldi	r22, 0x02	; 2
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e4       	ldi	r27, 0x40	; 64
    12f8:	89 8f       	std	Y+25, r24	; 0x19
    12fa:	9a 8f       	std	Y+26, r25	; 0x1a
    12fc:	ab 8f       	std	Y+27, r26	; 0x1b
    12fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1300:	69 8d       	ldd	r22, Y+25	; 0x19
    1302:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1306:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	4a ef       	ldi	r20, 0xFA	; 250
    130e:	54 e4       	ldi	r21, 0x44	; 68
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	8d 8b       	std	Y+21, r24	; 0x15
    131a:	9e 8b       	std	Y+22, r25	; 0x16
    131c:	af 8b       	std	Y+23, r26	; 0x17
    131e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1320:	6d 89       	ldd	r22, Y+21	; 0x15
    1322:	7e 89       	ldd	r23, Y+22	; 0x16
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1334:	88 23       	and	r24, r24
    1336:	2c f4       	brge	.+10     	; 0x1342 <CLCD_voidSend4BitCommand+0x94>
		__ticks = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9c 8b       	std	Y+20, r25	; 0x14
    133e:	8b 8b       	std	Y+19, r24	; 0x13
    1340:	3f c0       	rjmp	.+126    	; 0x13c0 <CLCD_voidSend4BitCommand+0x112>
	else if (__tmp > 65535)
    1342:	6d 89       	ldd	r22, Y+21	; 0x15
    1344:	7e 89       	ldd	r23, Y+22	; 0x16
    1346:	8f 89       	ldd	r24, Y+23	; 0x17
    1348:	98 8d       	ldd	r25, Y+24	; 0x18
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	3f ef       	ldi	r19, 0xFF	; 255
    134e:	4f e7       	ldi	r20, 0x7F	; 127
    1350:	57 e4       	ldi	r21, 0x47	; 71
    1352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1356:	18 16       	cp	r1, r24
    1358:	4c f5       	brge	.+82     	; 0x13ac <CLCD_voidSend4BitCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135a:	69 8d       	ldd	r22, Y+25	; 0x19
    135c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e2       	ldi	r20, 0x20	; 32
    1368:	51 e4       	ldi	r21, 0x41	; 65
    136a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9c 8b       	std	Y+20, r25	; 0x14
    1380:	8b 8b       	std	Y+19, r24	; 0x13
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <CLCD_voidSend4BitCommand+0xf4>
    1384:	88 ec       	ldi	r24, 0xC8	; 200
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9a 8b       	std	Y+18, r25	; 0x12
    138a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    138c:	89 89       	ldd	r24, Y+17	; 0x11
    138e:	9a 89       	ldd	r25, Y+18	; 0x12
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <CLCD_voidSend4BitCommand+0xe2>
    1394:	9a 8b       	std	Y+18, r25	; 0x12
    1396:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1398:	8b 89       	ldd	r24, Y+19	; 0x13
    139a:	9c 89       	ldd	r25, Y+20	; 0x14
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	9c 8b       	std	Y+20, r25	; 0x14
    13a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	69 f7       	brne	.-38     	; 0x1384 <CLCD_voidSend4BitCommand+0xd6>
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <CLCD_voidSend4BitCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ac:	6d 89       	ldd	r22, Y+21	; 0x15
    13ae:	7e 89       	ldd	r23, Y+22	; 0x16
    13b0:	8f 89       	ldd	r24, Y+23	; 0x17
    13b2:	98 8d       	ldd	r25, Y+24	; 0x18
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9c 8b       	std	Y+20, r25	; 0x14
    13be:	8b 8b       	std	Y+19, r24	; 0x13
    13c0:	8b 89       	ldd	r24, Y+19	; 0x13
    13c2:	9c 89       	ldd	r25, Y+20	; 0x14
    13c4:	98 8b       	std	Y+16, r25	; 0x10
    13c6:	8f 87       	std	Y+15, r24	; 0x0f
    13c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ca:	98 89       	ldd	r25, Y+16	; 0x10
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <CLCD_voidSend4BitCommand+0x11e>
    13d0:	98 8b       	std	Y+16, r25	; 0x10
    13d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	62 e0       	ldi	r22, 0x02	; 2
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* store the 4 LSB to send second */
	Local_Cmd = Copy_u8Command << 4 ;
    13de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13e0:	82 95       	swap	r24
    13e2:	80 7f       	andi	r24, 0xF0	; 240
    13e4:	8d 8f       	std	Y+29, r24	; 0x1d
	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Cmd);
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13ea:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	62 e0       	ldi	r22, 0x02	; 2
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e4       	ldi	r27, 0x40	; 64
    1400:	8b 87       	std	Y+11, r24	; 0x0b
    1402:	9c 87       	std	Y+12, r25	; 0x0c
    1404:	ad 87       	std	Y+13, r26	; 0x0d
    1406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	6b 85       	ldd	r22, Y+11	; 0x0b
    140a:	7c 85       	ldd	r23, Y+12	; 0x0c
    140c:	8d 85       	ldd	r24, Y+13	; 0x0d
    140e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8f 83       	std	Y+7, r24	; 0x07
    1422:	98 87       	std	Y+8, r25	; 0x08
    1424:	a9 87       	std	Y+9, r26	; 0x09
    1426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1428:	6f 81       	ldd	r22, Y+7	; 0x07
    142a:	78 85       	ldd	r23, Y+8	; 0x08
    142c:	89 85       	ldd	r24, Y+9	; 0x09
    142e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <CLCD_voidSend4BitCommand+0x19c>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <CLCD_voidSend4BitCommand+0x21a>
	else if (__tmp > 65535)
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <CLCD_voidSend4BitCommand+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <CLCD_voidSend4BitCommand+0x1fc>
    148c:	88 ec       	ldi	r24, 0xC8	; 200
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <CLCD_voidSend4BitCommand+0x1ea>
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <CLCD_voidSend4BitCommand+0x1de>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <CLCD_voidSend4BitCommand+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <CLCD_voidSend4BitCommand+0x226>
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>



}
    14e6:	6e 96       	adiw	r28, 0x1e	; 30
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <CLCD_voidSend4BitData>:

void CLCD_voidSend4BitData(uint8_t Copy_u8Data){
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	6e 97       	sbiw	r28, 0x1e	; 30
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	8e 8f       	std	Y+30, r24	; 0x1e

	uint8_t Local_Data = Copy_u8Data & MODE_4BIT_MASK;
    150e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1510:	80 7f       	andi	r24, 0xF0	; 240
    1512:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS pin to HIGH for DATA */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    1514:	83 e0       	ldi	r24, 0x03	; 3
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* send data to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Data);
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    152c:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	62 e0       	ldi	r22, 0x02	; 2
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e4       	ldi	r27, 0x40	; 64
    1542:	89 8f       	std	Y+25, r24	; 0x19
    1544:	9a 8f       	std	Y+26, r25	; 0x1a
    1546:	ab 8f       	std	Y+27, r26	; 0x1b
    1548:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	69 8d       	ldd	r22, Y+25	; 0x19
    154c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    154e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a ef       	ldi	r20, 0xFA	; 250
    1558:	54 e4       	ldi	r21, 0x44	; 68
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8d 8b       	std	Y+21, r24	; 0x15
    1564:	9e 8b       	std	Y+22, r25	; 0x16
    1566:	af 8b       	std	Y+23, r26	; 0x17
    1568:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    156a:	6d 89       	ldd	r22, Y+21	; 0x15
    156c:	7e 89       	ldd	r23, Y+22	; 0x16
    156e:	8f 89       	ldd	r24, Y+23	; 0x17
    1570:	98 8d       	ldd	r25, Y+24	; 0x18
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	2c f4       	brge	.+10     	; 0x158c <CLCD_voidSend4BitData+0x94>
		__ticks = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9c 8b       	std	Y+20, r25	; 0x14
    1588:	8b 8b       	std	Y+19, r24	; 0x13
    158a:	3f c0       	rjmp	.+126    	; 0x160a <CLCD_voidSend4BitData+0x112>
	else if (__tmp > 65535)
    158c:	6d 89       	ldd	r22, Y+21	; 0x15
    158e:	7e 89       	ldd	r23, Y+22	; 0x16
    1590:	8f 89       	ldd	r24, Y+23	; 0x17
    1592:	98 8d       	ldd	r25, Y+24	; 0x18
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	4c f5       	brge	.+82     	; 0x15f6 <CLCD_voidSend4BitData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	69 8d       	ldd	r22, Y+25	; 0x19
    15a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9c 8b       	std	Y+20, r25	; 0x14
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <CLCD_voidSend4BitData+0xf4>
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9a 8b       	std	Y+18, r25	; 0x12
    15d4:	89 8b       	std	Y+17, r24	; 0x11
    15d6:	89 89       	ldd	r24, Y+17	; 0x11
    15d8:	9a 89       	ldd	r25, Y+18	; 0x12
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <CLCD_voidSend4BitData+0xe2>
    15de:	9a 8b       	std	Y+18, r25	; 0x12
    15e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	8b 89       	ldd	r24, Y+19	; 0x13
    15e4:	9c 89       	ldd	r25, Y+20	; 0x14
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	9c 8b       	std	Y+20, r25	; 0x14
    15ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	8b 89       	ldd	r24, Y+19	; 0x13
    15ee:	9c 89       	ldd	r25, Y+20	; 0x14
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f7       	brne	.-38     	; 0x15ce <CLCD_voidSend4BitData+0xd6>
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <CLCD_voidSend4BitData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	6d 89       	ldd	r22, Y+21	; 0x15
    15f8:	7e 89       	ldd	r23, Y+22	; 0x16
    15fa:	8f 89       	ldd	r24, Y+23	; 0x17
    15fc:	98 8d       	ldd	r25, Y+24	; 0x18
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9c 8b       	std	Y+20, r25	; 0x14
    1608:	8b 8b       	std	Y+19, r24	; 0x13
    160a:	8b 89       	ldd	r24, Y+19	; 0x13
    160c:	9c 89       	ldd	r25, Y+20	; 0x14
    160e:	98 8b       	std	Y+16, r25	; 0x10
    1610:	8f 87       	std	Y+15, r24	; 0x0f
    1612:	8f 85       	ldd	r24, Y+15	; 0x0f
    1614:	98 89       	ldd	r25, Y+16	; 0x10
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <CLCD_voidSend4BitData+0x11e>
    161a:	98 8b       	std	Y+16, r25	; 0x10
    161c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* store the 4 LSB to send second */
	Local_Data = Copy_u8Data << 4 ;
    1628:	8e 8d       	ldd	r24, Y+30	; 0x1e
    162a:	82 95       	swap	r24
    162c:	80 7f       	andi	r24, 0xF0	; 240
    162e:	8d 8f       	std	Y+29, r24	; 0x1d

	/* send data to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Local_Data);
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1634:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	62 e0       	ldi	r22, 0x02	; 2
    163c:	41 e0       	ldi	r20, 0x01	; 1
    163e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e0       	ldi	r26, 0x00	; 0
    1648:	b0 e4       	ldi	r27, 0x40	; 64
    164a:	8b 87       	std	Y+11, r24	; 0x0b
    164c:	9c 87       	std	Y+12, r25	; 0x0c
    164e:	ad 87       	std	Y+13, r26	; 0x0d
    1650:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4a ef       	ldi	r20, 0xFA	; 250
    1660:	54 e4       	ldi	r21, 0x44	; 68
    1662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	8f 83       	std	Y+7, r24	; 0x07
    166c:	98 87       	std	Y+8, r25	; 0x08
    166e:	a9 87       	std	Y+9, r26	; 0x09
    1670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1686:	88 23       	and	r24, r24
    1688:	2c f4       	brge	.+10     	; 0x1694 <CLCD_voidSend4BitData+0x19c>
		__ticks = 1;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	3f c0       	rjmp	.+126    	; 0x1712 <CLCD_voidSend4BitData+0x21a>
	else if (__tmp > 65535)
    1694:	6f 81       	ldd	r22, Y+7	; 0x07
    1696:	78 85       	ldd	r23, Y+8	; 0x08
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	57 e4       	ldi	r21, 0x47	; 71
    16a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	4c f5       	brge	.+82     	; 0x16fe <CLCD_voidSend4BitData+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <CLCD_voidSend4BitData+0x1fc>
    16d6:	88 ec       	ldi	r24, 0xC8	; 200
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <CLCD_voidSend4BitData+0x1ea>
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	69 f7       	brne	.-38     	; 0x16d6 <CLCD_voidSend4BitData+0x1de>
    16fc:	14 c0       	rjmp	.+40     	; 0x1726 <CLCD_voidSend4BitData+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <CLCD_voidSend4BitData+0x226>
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	62 e0       	ldi	r22, 0x02	; 2
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>



}
    1730:	6e 96       	adiw	r28, 0x1e	; 30
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <CLCD_voidSend8BitCommand>:


void CLCD_voidSend8BitCommand(uint8_t Copy_u8Command){
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	2f 97       	sbiw	r28, 0x0f	; 15
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	8f 87       	std	Y+15, r24	; 0x0f

	/* Set RS pin to low for command */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1770:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	62 e0       	ldi	r22, 0x02	; 2
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e4       	ldi	r27, 0x40	; 64
    1786:	8b 87       	std	Y+11, r24	; 0x0b
    1788:	9c 87       	std	Y+12, r25	; 0x0c
    178a:	ad 87       	std	Y+13, r26	; 0x0d
    178c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a ef       	ldi	r20, 0xFA	; 250
    179c:	54 e4       	ldi	r21, 0x44	; 68
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8f 83       	std	Y+7, r24	; 0x07
    17a8:	98 87       	std	Y+8, r25	; 0x08
    17aa:	a9 87       	std	Y+9, r26	; 0x09
    17ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <CLCD_voidSend8BitCommand+0x8e>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <CLCD_voidSend8BitCommand+0x10c>
	else if (__tmp > 65535)
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <CLCD_voidSend8BitCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <CLCD_voidSend8BitCommand+0xee>
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <CLCD_voidSend8BitCommand+0xdc>
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <CLCD_voidSend8BitCommand+0xd0>
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <CLCD_voidSend8BitCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <CLCD_voidSend8BitCommand+0x118>
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

}
    186c:	2f 96       	adiw	r28, 0x0f	; 15
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <CLCD_voidSend8BitData>:

void CLCD_voidSend8BitData(uint8_t Copy_u8Data){
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	2f 97       	sbiw	r28, 0x0f	; 15
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	8f 87       	std	Y+15, r24	; 0x0f

	/* Set RS pin to HIGH for DATA */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* Set RW pin to LOW for Write */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

	/* send command to data pins */
	(void)DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ac:	0e 94 8d 10 	call	0x211a	; 0x211a <DIO_SetPortValue>

	/*send enable pulse */
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	62 e0       	ldi	r22, 0x02	; 2
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e4       	ldi	r27, 0x40	; 64
    18c2:	8b 87       	std	Y+11, r24	; 0x0b
    18c4:	9c 87       	std	Y+12, r25	; 0x0c
    18c6:	ad 87       	std	Y+13, r26	; 0x0d
    18c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    18cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a ef       	ldi	r20, 0xFA	; 250
    18d8:	54 e4       	ldi	r21, 0x44	; 68
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	8f 83       	std	Y+7, r24	; 0x07
    18e4:	98 87       	std	Y+8, r25	; 0x08
    18e6:	a9 87       	std	Y+9, r26	; 0x09
    18e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ea:	6f 81       	ldd	r22, Y+7	; 0x07
    18ec:	78 85       	ldd	r23, Y+8	; 0x08
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <CLCD_voidSend8BitData+0x8e>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	3f c0       	rjmp	.+126    	; 0x198a <CLCD_voidSend8BitData+0x10c>
	else if (__tmp > 65535)
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1920:	18 16       	cp	r1, r24
    1922:	4c f5       	brge	.+82     	; 0x1976 <CLCD_voidSend8BitData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	6b 85       	ldd	r22, Y+11	; 0x0b
    1926:	7c 85       	ldd	r23, Y+12	; 0x0c
    1928:	8d 85       	ldd	r24, Y+13	; 0x0d
    192a:	9e 85       	ldd	r25, Y+14	; 0x0e
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	0f c0       	rjmp	.+30     	; 0x196c <CLCD_voidSend8BitData+0xee>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <CLCD_voidSend8BitData+0xdc>
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f7       	brne	.-38     	; 0x194e <CLCD_voidSend8BitData+0xd0>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <CLCD_voidSend8BitData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <CLCD_voidSend8BitData+0x118>
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	(void)DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	62 e0       	ldi	r22, 0x02	; 2
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

}
    19a8:	2f 96       	adiw	r28, 0x0f	; 15
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <CLCD_voidSendData>:

void CLCD_voidSendData(uint8_t Copy_u8Data){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSend8BitData(Copy_u8Data);

#elif CLCD_MODE == CLCD_4BIT_MODE

	CLCD_voidSend4BitData(Copy_u8Data);
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <CLCD_voidSend4BitData>

#endif
}
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8_t Copy_u8Data){
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSend8BitCommand(Copy_u8Data);

#elif CLCD_MODE == CLCD_4BIT_MODE

	CLCD_voidSend4BitCommand(Copy_u8Data);
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	0e 94 57 09 	call	0x12ae	; 0x12ae <CLCD_voidSend4BitCommand>

#endif
}
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <CLCD_Clear>:

void CLCD_Clear(){
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62

	/* Clear Display  */
	CLCD_voidSendCmd(ClEAR_LCD);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <CLCD_voidSendCmd>
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <CLCD_DispOff>:

void CLCD_DispOff(){
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(DISPLAY_OFF_CURSOR_OFF);
    1a0a:	88 e0       	ldi	r24, 0x08	; 8
    1a0c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <CLCD_voidSendCmd>
}
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <CLCD_DispOn>:

void CLCD_DispOn(){
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(DISPLAY_OFF_CURSOR_ON);
    1a1e:	8a e0       	ldi	r24, 0x0A	; 10
    1a20:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <CLCD_voidSendCmd>
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <CLCD_ShL>:

void CLCD_ShL()
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(SHIFT_CURSOR_POSITION_TO_LEFT);
    1a32:	80 e1       	ldi	r24, 0x10	; 16
    1a34:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <CLCD_voidSendCmd>

}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <CLCD_ShR>:

void CLCD_ShR()
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(SHIFT_CURSOR_POSITION_TO_RIGHT);
    1a46:	84 e1       	ldi	r24, 0x14	; 20
    1a48:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <CLCD_voidSendCmd>

}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <CLCD_voidInit>:
void CLCD_voidInit(void){
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	2e 97       	sbiw	r28, 0x0e	; 14
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e2       	ldi	r26, 0x20	; 32
    1a6c:	b2 e4       	ldi	r27, 0x42	; 66
    1a6e:	8b 87       	std	Y+11, r24	; 0x0b
    1a70:	9c 87       	std	Y+12, r25	; 0x0c
    1a72:	ad 87       	std	Y+13, r26	; 0x0d
    1a74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8f 83       	std	Y+7, r24	; 0x07
    1a90:	98 87       	std	Y+8, r25	; 0x08
    1a92:	a9 87       	std	Y+9, r26	; 0x09
    1a94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
    1a98:	78 85       	ldd	r23, Y+8	; 0x08
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <CLCD_voidInit+0x66>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <CLCD_voidInit+0xc6>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <CLCD_voidInit+0xb4>
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <CLCD_voidInit+0xa8>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <CLCD_voidInit+0xf0>
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSend8BitCommand(ClEAR_LCD);

#elif CLCD_MODE == CLCD_4BIT_MODE

	/*Send command to set for 4 bit mode */
	CLCD_voidSend4BitCommand(CLCD_4BIT_MODE );
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	0e 94 57 09 	call	0x12ae	; 0x12ae <CLCD_voidSend4BitCommand>

	/* Function set command control lines and font size */
	CLCD_voidSend4BitCommand(CLCD_FUNC_SET);
    1b50:	88 e2       	ldi	r24, 0x28	; 40
    1b52:	0e 94 57 09 	call	0x12ae	; 0x12ae <CLCD_voidSend4BitCommand>

	/* Display on oFF control */
	CLCD_voidSend4BitCommand(CLCD_DISPLAY_CTRL);
    1b56:	8c e0       	ldi	r24, 0x0C	; 12
    1b58:	0e 94 57 09 	call	0x12ae	; 0x12ae <CLCD_voidSend4BitCommand>

	/* Clear Display  */
	CLCD_voidSend4BitCommand(ClEAR_LCD);
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	0e 94 57 09 	call	0x12ae	; 0x12ae <CLCD_voidSend4BitCommand>

#endif
}
    1b62:	2e 96       	adiw	r28, 0x0e	; 14
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_pcString){
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <CLCD_voidSendString+0x6>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	9b 83       	std	Y+3, r25	; 0x03
    1b82:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_u8Iterator = 0;
    1b84:	19 82       	std	Y+1, r1	; 0x01
    1b86:	0e c0       	rjmp	.+28     	; 0x1ba4 <CLCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	fc 01       	movw	r30, r24
    1b94:	e2 0f       	add	r30, r18
    1b96:	f3 1f       	adc	r31, r19
    1b98:	80 81       	ld	r24, Z
    1b9a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <CLCD_voidSendData>

		Local_u8Iterator++;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char* Copy_pcString){

	uint8_t Local_u8Iterator = 0;

	while(Copy_pcString[Local_u8Iterator] != '\0')
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e2 0f       	add	r30, r18
    1bb2:	f3 1f       	adc	r31, r19
    1bb4:	80 81       	ld	r24, Z
    1bb6:	88 23       	and	r24, r24
    1bb8:	39 f7       	brne	.-50     	; 0x1b88 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);

		Local_u8Iterator++;
	}

}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(uint32  Copy_u8Data)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	a4 97       	sbiw	r28, 0x24	; 36
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	9c a3       	std	Y+36, r25	; 0x24
    1bdc:	8b a3       	std	Y+35, r24	; 0x23
	 sint8_t Local_Index ;
	 uint8_t Local_Iterator = 0;
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	1d c0       	rjmp	.+58     	; 0x1c1c <CLCD_voidSendNumber+0x56>


	while (Copy_u8Data > 0) {

		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	e8 2f       	mov	r30, r24
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8b a1       	ldd	r24, Y+35	; 0x23
    1bea:	9c a1       	ldd	r25, Y+36	; 0x24
    1bec:	2a e0       	ldi	r18, 0x0A	; 10
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	b9 01       	movw	r22, r18
    1bf2:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__udivmodhi4>
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	03 96       	adiw	r24, 0x03	; 3
    1bfc:	e8 0f       	add	r30, r24
    1bfe:	f9 1f       	adc	r31, r25
    1c00:	20 83       	st	Z, r18
		Copy_u8Data =  Copy_u8Data / 10;
    1c02:	8b a1       	ldd	r24, Y+35	; 0x23
    1c04:	9c a1       	ldd	r25, Y+36	; 0x24
    1c06:	2a e0       	ldi	r18, 0x0A	; 10
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	b9 01       	movw	r22, r18
    1c0c:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__udivmodhi4>
    1c10:	cb 01       	movw	r24, r22
    1c12:	9c a3       	std	Y+36, r25	; 0x24
    1c14:	8b a3       	std	Y+35, r24	; 0x23
		Local_Iterator++;
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	 uint8_t Local_Iterator = 0;
	char arru8Digit [32];



	while (Copy_u8Data > 0) {
    1c1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1c1e:	9c a1       	ldd	r25, Y+36	; 0x24
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	f9 f6       	brne	.-66     	; 0x1be2 <CLCD_voidSendNumber+0x1c>
		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
		Copy_u8Data =  Copy_u8Data / 10;
		Local_Iterator++;
	}
	for(Local_Index = Local_Iterator-1 ; Local_Index >= 0 ; Local_Index--)
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	81 50       	subi	r24, 0x01	; 1
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	11 c0       	rjmp	.+34     	; 0x1c4e <CLCD_voidSendNumber+0x88>
	{
		CLCD_voidSendData(arru8Digit[Local_Index]+ '0') ;
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	33 27       	eor	r19, r19
    1c32:	27 fd       	sbrc	r18, 7
    1c34:	30 95       	com	r19
    1c36:	ce 01       	movw	r24, r28
    1c38:	03 96       	adiw	r24, 0x03	; 3
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	80 5d       	subi	r24, 0xD0	; 208
    1c44:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <CLCD_voidSendData>
		// storing remainder in digit array
		arru8Digit[Local_Iterator] = Copy_u8Data % 10;
		Copy_u8Data =  Copy_u8Data / 10;
		Local_Iterator++;
	}
	for(Local_Index = Local_Iterator-1 ; Local_Index >= 0 ; Local_Index--)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	81 50       	subi	r24, 0x01	; 1
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	88 23       	and	r24, r24
    1c52:	64 f7       	brge	.-40     	; 0x1c2c <CLCD_voidSendNumber+0x66>
	{
		CLCD_voidSendData(arru8Digit[Local_Index]+ '0') ;
	}


}
    1c54:	a4 96       	adiw	r28, 0x24	; 36
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8_t Copy_u8XPos,uint8_t Copy_u8YPos){
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <CLCD_voidGoToXY+0x6>
    1c6c:	0f 92       	push	r0
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	8a 83       	std	Y+2, r24	; 0x02
    1c74:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t Local_u8Address;
	if(Copy_u8XPos == 0)
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	88 23       	and	r24, r24
    1c7a:	19 f4       	brne	.+6      	; 0x1c82 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos == 1)
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	19 f4       	brne	.+6      	; 0x1c8e <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	80 5c       	subi	r24, 0xC0	; 192
    1c8c:	89 83       	std	Y+1, r24	; 0x01
	 ************************************************
	 * 1 * adresss               ********************
	 ************************************************
	 */

	CLCD_voidSendCmd(Local_u8Address+128);
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	80 58       	subi	r24, 0x80	; 128
    1c92:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <CLCD_voidSendCmd>
}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <DIO_SetPinDirection>:
* @endcode
***************************************************************/


ErrorState_t DIO_SetPinDirection(DioPort_t Port,DioPin_t Pin, DioMode_t Mode)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	2a 97       	sbiw	r28, 0x0a	; 10
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	8a 83       	std	Y+2, r24	; 0x02
    1cb8:	6b 83       	std	Y+3, r22	; 0x03
    1cba:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE;
    1cbc:	8a e0       	ldi	r24, 0x0A	; 10
    1cbe:	89 83       	std	Y+1, r24	; 0x01

	if(Pin<= PIN7)
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	88 30       	cpi	r24, 0x08	; 8
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <DIO_SetPinDirection+0x26>
    1cc6:	d5 c1       	rjmp	.+938    	; 0x2072 <DIO_SetPinDirection+0x3d0>
	{
		if(Mode==DIO_INPUT)
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <DIO_SetPinDirection+0x2e>
    1cce:	7e c0       	rjmp	.+252    	; 0x1dcc <DIO_SetPinDirection+0x12a>
		{
			switch(Port)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3a 87       	std	Y+10, r19	; 0x0a
    1cd8:	29 87       	std	Y+9, r18	; 0x09
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	69 f1       	breq	.+90     	; 0x1d3e <DIO_SetPinDirection+0x9c>
    1ce4:	29 85       	ldd	r18, Y+9	; 0x09
    1ce6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <DIO_SetPinDirection+0x56>
    1cee:	89 85       	ldd	r24, Y+9	; 0x09
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	69 f0       	breq	.+26     	; 0x1d10 <DIO_SetPinDirection+0x6e>
    1cf6:	68 c0       	rjmp	.+208    	; 0x1dc8 <DIO_SetPinDirection+0x126>
    1cf8:	29 85       	ldd	r18, Y+9	; 0x09
    1cfa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	a9 f1       	breq	.+106    	; 0x1d6c <DIO_SetPinDirection+0xca>
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	83 30       	cpi	r24, 0x03	; 3
    1d08:	91 05       	cpc	r25, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <DIO_SetPinDirection+0x6c>
    1d0c:	46 c0       	rjmp	.+140    	; 0x1d9a <DIO_SetPinDirection+0xf8>
    1d0e:	5c c0       	rjmp	.+184    	; 0x1dc8 <DIO_SetPinDirection+0x126>
			{
			case PORTA: CLR_BIT( PORTA_BASE_PTR->DDR,Pin); break;
    1d10:	a9 e3       	ldi	r26, 0x39	; 57
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e9 e3       	ldi	r30, 0x39	; 57
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	81 81       	ldd	r24, Z+1	; 0x01
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_SetPinDirection+0x8c>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_SetPinDirection+0x88>
    1d32:	80 95       	com	r24
    1d34:	84 23       	and	r24, r20
    1d36:	11 96       	adiw	r26, 0x01	; 1
    1d38:	8c 93       	st	X, r24
    1d3a:	11 97       	sbiw	r26, 0x01	; 1
    1d3c:	47 c0       	rjmp	.+142    	; 0x1dcc <DIO_SetPinDirection+0x12a>
			case PORTB: CLR_BIT( PORTB_BASE_PTR->DDR,Pin); break;
    1d3e:	a6 e3       	ldi	r26, 0x36	; 54
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e6 e3       	ldi	r30, 0x36	; 54
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	81 81       	ldd	r24, Z+1	; 0x01
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_SetPinDirection+0xba>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_SetPinDirection+0xb6>
    1d60:	80 95       	com	r24
    1d62:	84 23       	and	r24, r20
    1d64:	11 96       	adiw	r26, 0x01	; 1
    1d66:	8c 93       	st	X, r24
    1d68:	11 97       	sbiw	r26, 0x01	; 1
    1d6a:	30 c0       	rjmp	.+96     	; 0x1dcc <DIO_SetPinDirection+0x12a>
			case PORTC: CLR_BIT( PORTC_BASE_PTR->DDR,Pin); break;
    1d6c:	a3 e3       	ldi	r26, 0x33	; 51
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e3 e3       	ldi	r30, 0x33	; 51
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	81 81       	ldd	r24, Z+1	; 0x01
    1d76:	48 2f       	mov	r20, r24
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_SetPinDirection+0xe8>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_SetPinDirection+0xe4>
    1d8e:	80 95       	com	r24
    1d90:	84 23       	and	r24, r20
    1d92:	11 96       	adiw	r26, 0x01	; 1
    1d94:	8c 93       	st	X, r24
    1d96:	11 97       	sbiw	r26, 0x01	; 1
    1d98:	19 c0       	rjmp	.+50     	; 0x1dcc <DIO_SetPinDirection+0x12a>
			case PORTD: CLR_BIT( PORTD_BASE_PTR->DDR,Pin); break;
    1d9a:	a0 e3       	ldi	r26, 0x30	; 48
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e0 e3       	ldi	r30, 0x30	; 48
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	81 81       	ldd	r24, Z+1	; 0x01
    1da4:	48 2f       	mov	r20, r24
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_SetPinDirection+0x116>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_SetPinDirection+0x112>
    1dbc:	80 95       	com	r24
    1dbe:	84 23       	and	r24, r20
    1dc0:	11 96       	adiw	r26, 0x01	; 1
    1dc2:	8c 93       	st	X, r24
    1dc4:	11 97       	sbiw	r26, 0x01	; 1
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <DIO_SetPinDirection+0x12a>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		if(Mode==DIO_INPUT_PULLUP)
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	82 30       	cpi	r24, 0x02	; 2
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <DIO_SetPinDirection+0x132>
    1dd2:	cd c0       	rjmp	.+410    	; 0x1f6e <DIO_SetPinDirection+0x2cc>
		{
			switch(Port)
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	38 87       	std	Y+8, r19	; 0x08
    1ddc:	2f 83       	std	Y+7, r18	; 0x07
    1dde:	8f 81       	ldd	r24, Y+7	; 0x07
    1de0:	98 85       	ldd	r25, Y+8	; 0x08
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	91 05       	cpc	r25, r1
    1de6:	09 f4       	brne	.+2      	; 0x1dea <DIO_SetPinDirection+0x148>
    1de8:	41 c0       	rjmp	.+130    	; 0x1e6c <DIO_SetPinDirection+0x1ca>
    1dea:	2f 81       	ldd	r18, Y+7	; 0x07
    1dec:	38 85       	ldd	r19, Y+8	; 0x08
    1dee:	22 30       	cpi	r18, 0x02	; 2
    1df0:	31 05       	cpc	r19, r1
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <DIO_SetPinDirection+0x15c>
    1df4:	8f 81       	ldd	r24, Y+7	; 0x07
    1df6:	98 85       	ldd	r25, Y+8	; 0x08
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	71 f0       	breq	.+28     	; 0x1e18 <DIO_SetPinDirection+0x176>
    1dfc:	b5 c0       	rjmp	.+362    	; 0x1f68 <DIO_SetPinDirection+0x2c6>
    1dfe:	2f 81       	ldd	r18, Y+7	; 0x07
    1e00:	38 85       	ldd	r19, Y+8	; 0x08
    1e02:	22 30       	cpi	r18, 0x02	; 2
    1e04:	31 05       	cpc	r19, r1
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <DIO_SetPinDirection+0x168>
    1e08:	5b c0       	rjmp	.+182    	; 0x1ec0 <DIO_SetPinDirection+0x21e>
    1e0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0c:	98 85       	ldd	r25, Y+8	; 0x08
    1e0e:	83 30       	cpi	r24, 0x03	; 3
    1e10:	91 05       	cpc	r25, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <DIO_SetPinDirection+0x174>
    1e14:	7f c0       	rjmp	.+254    	; 0x1f14 <DIO_SetPinDirection+0x272>
    1e16:	a8 c0       	rjmp	.+336    	; 0x1f68 <DIO_SetPinDirection+0x2c6>
			{
			case PORTA: CLR_BIT( PORTA_BASE_PTR->DDR,Pin);SET_BIT( PORTA_BASE_PTR->PORT,Pin); break;
    1e18:	a9 e3       	ldi	r26, 0x39	; 57
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e9 e3       	ldi	r30, 0x39	; 57
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	81 81       	ldd	r24, Z+1	; 0x01
    1e22:	48 2f       	mov	r20, r24
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <DIO_SetPinDirection+0x192>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	2a 95       	dec	r18
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <DIO_SetPinDirection+0x18e>
    1e38:	80 95       	com	r24
    1e3a:	84 23       	and	r24, r20
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	8c 93       	st	X, r24
    1e40:	a9 e3       	ldi	r26, 0x39	; 57
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e9 e3       	ldi	r30, 0x39	; 57
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <DIO_SetPinDirection+0x1bc>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <DIO_SetPinDirection+0x1b8>
    1e62:	84 2b       	or	r24, r20
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	8c 93       	st	X, r24
    1e68:	12 97       	sbiw	r26, 0x02	; 2
    1e6a:	04 c1       	rjmp	.+520    	; 0x2074 <DIO_SetPinDirection+0x3d2>
			case PORTB: CLR_BIT( PORTB_BASE_PTR->DDR,Pin);SET_BIT( PORTB_BASE_PTR->PORT,Pin); break;
    1e6c:	a6 e3       	ldi	r26, 0x36	; 54
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e6 e3       	ldi	r30, 0x36	; 54
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	81 81       	ldd	r24, Z+1	; 0x01
    1e76:	48 2f       	mov	r20, r24
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <DIO_SetPinDirection+0x1e6>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	2a 95       	dec	r18
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <DIO_SetPinDirection+0x1e2>
    1e8c:	80 95       	com	r24
    1e8e:	84 23       	and	r24, r20
    1e90:	11 96       	adiw	r26, 0x01	; 1
    1e92:	8c 93       	st	X, r24
    1e94:	a6 e3       	ldi	r26, 0x36	; 54
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e6 e3       	ldi	r30, 0x36	; 54
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <DIO_SetPinDirection+0x210>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <DIO_SetPinDirection+0x20c>
    1eb6:	84 2b       	or	r24, r20
    1eb8:	12 96       	adiw	r26, 0x02	; 2
    1eba:	8c 93       	st	X, r24
    1ebc:	12 97       	sbiw	r26, 0x02	; 2
    1ebe:	da c0       	rjmp	.+436    	; 0x2074 <DIO_SetPinDirection+0x3d2>
			case PORTC: CLR_BIT( PORTC_BASE_PTR->DDR,Pin);SET_BIT( PORTC_BASE_PTR->PORT,Pin); break;
    1ec0:	a3 e3       	ldi	r26, 0x33	; 51
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e3 e3       	ldi	r30, 0x33	; 51
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	81 81       	ldd	r24, Z+1	; 0x01
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <DIO_SetPinDirection+0x23a>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	2a 95       	dec	r18
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <DIO_SetPinDirection+0x236>
    1ee0:	80 95       	com	r24
    1ee2:	84 23       	and	r24, r20
    1ee4:	11 96       	adiw	r26, 0x01	; 1
    1ee6:	8c 93       	st	X, r24
    1ee8:	a3 e3       	ldi	r26, 0x33	; 51
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e3 e3       	ldi	r30, 0x33	; 51
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_SetPinDirection+0x264>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_SetPinDirection+0x260>
    1f0a:	84 2b       	or	r24, r20
    1f0c:	12 96       	adiw	r26, 0x02	; 2
    1f0e:	8c 93       	st	X, r24
    1f10:	12 97       	sbiw	r26, 0x02	; 2
    1f12:	b0 c0       	rjmp	.+352    	; 0x2074 <DIO_SetPinDirection+0x3d2>
			case PORTD: CLR_BIT( PORTD_BASE_PTR->DDR,Pin);SET_BIT( PORTD_BASE_PTR->PORT,Pin); break;
    1f14:	a0 e3       	ldi	r26, 0x30	; 48
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e0 e3       	ldi	r30, 0x30	; 48
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	81 81       	ldd	r24, Z+1	; 0x01
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_SetPinDirection+0x28e>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	2a 95       	dec	r18
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_SetPinDirection+0x28a>
    1f34:	80 95       	com	r24
    1f36:	84 23       	and	r24, r20
    1f38:	11 96       	adiw	r26, 0x01	; 1
    1f3a:	8c 93       	st	X, r24
    1f3c:	a0 e3       	ldi	r26, 0x30	; 48
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e0 e3       	ldi	r30, 0x30	; 48
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	48 2f       	mov	r20, r24
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_SetPinDirection+0x2b8>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <DIO_SetPinDirection+0x2b4>
    1f5e:	84 2b       	or	r24, r20
    1f60:	12 96       	adiw	r26, 0x02	; 2
    1f62:	8c 93       	st	X, r24
    1f64:	12 97       	sbiw	r26, 0x02	; 2
    1f66:	86 c0       	rjmp	.+268    	; 0x2074 <DIO_SetPinDirection+0x3d2>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	83 c0       	rjmp	.+262    	; 0x2074 <DIO_SetPinDirection+0x3d2>
			}
		}
		else if (Mode==DIO_OUTPUT)
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	88 23       	and	r24, r24
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <DIO_SetPinDirection+0x2d4>
    1f74:	7b c0       	rjmp	.+246    	; 0x206c <DIO_SetPinDirection+0x3ca>
		{
			switch(Port)
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3e 83       	std	Y+6, r19	; 0x06
    1f7e:	2d 83       	std	Y+5, r18	; 0x05
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	91 05       	cpc	r25, r1
    1f88:	61 f1       	breq	.+88     	; 0x1fe2 <DIO_SetPinDirection+0x340>
    1f8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f8e:	22 30       	cpi	r18, 0x02	; 2
    1f90:	31 05       	cpc	r19, r1
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <DIO_SetPinDirection+0x2fc>
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	69 f0       	breq	.+26     	; 0x1fb6 <DIO_SetPinDirection+0x314>
    1f9c:	64 c0       	rjmp	.+200    	; 0x2066 <DIO_SetPinDirection+0x3c4>
    1f9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	99 f1       	breq	.+102    	; 0x200e <DIO_SetPinDirection+0x36c>
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	91 05       	cpc	r25, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <DIO_SetPinDirection+0x312>
    1fb2:	43 c0       	rjmp	.+134    	; 0x203a <DIO_SetPinDirection+0x398>
    1fb4:	58 c0       	rjmp	.+176    	; 0x2066 <DIO_SetPinDirection+0x3c4>
			{
			case PORTA: SET_BIT( PORTA_BASE_PTR->DDR,Pin); break;
    1fb6:	a9 e3       	ldi	r26, 0x39	; 57
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e9 e3       	ldi	r30, 0x39	; 57
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	81 81       	ldd	r24, Z+1	; 0x01
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <DIO_SetPinDirection+0x332>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <DIO_SetPinDirection+0x32e>
    1fd8:	84 2b       	or	r24, r20
    1fda:	11 96       	adiw	r26, 0x01	; 1
    1fdc:	8c 93       	st	X, r24
    1fde:	11 97       	sbiw	r26, 0x01	; 1
    1fe0:	49 c0       	rjmp	.+146    	; 0x2074 <DIO_SetPinDirection+0x3d2>
			case PORTB: SET_BIT( PORTB_BASE_PTR->DDR,Pin); break;
    1fe2:	a6 e3       	ldi	r26, 0x36	; 54
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e6 e3       	ldi	r30, 0x36	; 54
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	81 81       	ldd	r24, Z+1	; 0x01
    1fec:	48 2f       	mov	r20, r24
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	02 2e       	mov	r0, r18
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <DIO_SetPinDirection+0x35e>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	0a 94       	dec	r0
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <DIO_SetPinDirection+0x35a>
    2004:	84 2b       	or	r24, r20
    2006:	11 96       	adiw	r26, 0x01	; 1
    2008:	8c 93       	st	X, r24
    200a:	11 97       	sbiw	r26, 0x01	; 1
    200c:	33 c0       	rjmp	.+102    	; 0x2074 <DIO_SetPinDirection+0x3d2>
			case PORTC: SET_BIT( PORTC_BASE_PTR->DDR,Pin); break;
    200e:	a3 e3       	ldi	r26, 0x33	; 51
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e3 e3       	ldi	r30, 0x33	; 51
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	81 81       	ldd	r24, Z+1	; 0x01
    2018:	48 2f       	mov	r20, r24
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 2e       	mov	r0, r18
    2026:	02 c0       	rjmp	.+4      	; 0x202c <DIO_SetPinDirection+0x38a>
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	0a 94       	dec	r0
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <DIO_SetPinDirection+0x386>
    2030:	84 2b       	or	r24, r20
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	8c 93       	st	X, r24
    2036:	11 97       	sbiw	r26, 0x01	; 1
    2038:	1d c0       	rjmp	.+58     	; 0x2074 <DIO_SetPinDirection+0x3d2>
			case PORTD: SET_BIT( PORTD_BASE_PTR->DDR,Pin); break;
    203a:	a0 e3       	ldi	r26, 0x30	; 48
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e0 e3       	ldi	r30, 0x30	; 48
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	81 81       	ldd	r24, Z+1	; 0x01
    2044:	48 2f       	mov	r20, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_SetPinDirection+0x3b6>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_SetPinDirection+0x3b2>
    205c:	84 2b       	or	r24, r20
    205e:	11 96       	adiw	r26, 0x01	; 1
    2060:	8c 93       	st	X, r24
    2062:	11 97       	sbiw	r26, 0x01	; 1
    2064:	07 c0       	rjmp	.+14     	; 0x2074 <DIO_SetPinDirection+0x3d2>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <DIO_SetPinDirection+0x3d2>
			}
		}
		else
		{
			Local_u8ErrorState = MODE_NOT_AVALIABLE;
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <DIO_SetPinDirection+0x3d2>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    2072:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2074:	89 81       	ldd	r24, Y+1	; 0x01
}
    2076:	2a 96       	adiw	r28, 0x0a	; 10
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <DIO_SetPortDirection>:
* DIO_SetPortDirection(PORTA,15);
* @endcode
***************************************************************************/

ErrorState_t DIO_SetPortDirection(DioPort_t Port, uint8_t u8Value)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <DIO_SetPortDirection+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <DIO_SetPortDirection+0x8>
    2090:	0f 92       	push	r0
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	8a 83       	std	Y+2, r24	; 0x02
    2098:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState = DONE;
    209a:	8a e0       	ldi	r24, 0x0A	; 10
    209c:	89 83       	std	Y+1, r24	; 0x01

	switch(Port)
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3d 83       	std	Y+5, r19	; 0x05
    20a6:	2c 83       	std	Y+4, r18	; 0x04
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	d1 f0       	breq	.+52     	; 0x20e6 <DIO_SetPortDirection+0x5e>
    20b2:	2c 81       	ldd	r18, Y+4	; 0x04
    20b4:	3d 81       	ldd	r19, Y+5	; 0x05
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <DIO_SetPortDirection+0x3e>
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	9d 81       	ldd	r25, Y+5	; 0x05
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	61 f0       	breq	.+24     	; 0x20dc <DIO_SetPortDirection+0x54>
    20c4:	1f c0       	rjmp	.+62     	; 0x2104 <DIO_SetPortDirection+0x7c>
    20c6:	2c 81       	ldd	r18, Y+4	; 0x04
    20c8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <DIO_SetPortDirection+0x68>
    20d0:	8c 81       	ldd	r24, Y+4	; 0x04
    20d2:	9d 81       	ldd	r25, Y+5	; 0x05
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	81 f0       	breq	.+32     	; 0x20fa <DIO_SetPortDirection+0x72>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <DIO_SetPortDirection+0x7c>
	{
	case PORTA : PORTA_BASE_PTR->DDR = u8Value; break;
    20dc:	e9 e3       	ldi	r30, 0x39	; 57
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	81 83       	std	Z+1, r24	; 0x01
    20e4:	11 c0       	rjmp	.+34     	; 0x2108 <DIO_SetPortDirection+0x80>
	case PORTB : PORTB_BASE_PTR->DDR = u8Value; break;
    20e6:	e6 e3       	ldi	r30, 0x36	; 54
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	81 83       	std	Z+1, r24	; 0x01
    20ee:	0c c0       	rjmp	.+24     	; 0x2108 <DIO_SetPortDirection+0x80>
	case PORTC : PORTC_BASE_PTR->DDR = u8Value; break;
    20f0:	e3 e3       	ldi	r30, 0x33	; 51
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	81 83       	std	Z+1, r24	; 0x01
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <DIO_SetPortDirection+0x80>
	case PORTD : PORTD_BASE_PTR->DDR = u8Value; break;
    20fa:	e0 e3       	ldi	r30, 0x30	; 48
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	81 83       	std	Z+1, r24	; 0x01
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_SetPortDirection+0x80>
	default: Local_u8ErrorState = PORT_NOT_FOUND;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2108:	89 81       	ldd	r24, Y+1	; 0x01
}
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <DIO_SetPortValue>:
* @endcode
***************************************************************************/


ErrorState_t DIO_SetPortValue(DioPort_t Port, uint8_t u8Value)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <DIO_SetPortValue+0x6>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <DIO_SetPortValue+0x8>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	8a 83       	std	Y+2, r24	; 0x02
    212a:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState = DONE;
    212c:	8a e0       	ldi	r24, 0x0A	; 10
    212e:	89 83       	std	Y+1, r24	; 0x01

	switch(Port)
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	3d 83       	std	Y+5, r19	; 0x05
    2138:	2c 83       	std	Y+4, r18	; 0x04
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	91 05       	cpc	r25, r1
    2142:	d1 f0       	breq	.+52     	; 0x2178 <DIO_SetPortValue+0x5e>
    2144:	2c 81       	ldd	r18, Y+4	; 0x04
    2146:	3d 81       	ldd	r19, Y+5	; 0x05
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	2c f4       	brge	.+10     	; 0x2158 <DIO_SetPortValue+0x3e>
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	61 f0       	breq	.+24     	; 0x216e <DIO_SetPortValue+0x54>
    2156:	1f c0       	rjmp	.+62     	; 0x2196 <DIO_SetPortValue+0x7c>
    2158:	2c 81       	ldd	r18, Y+4	; 0x04
    215a:	3d 81       	ldd	r19, Y+5	; 0x05
    215c:	22 30       	cpi	r18, 0x02	; 2
    215e:	31 05       	cpc	r19, r1
    2160:	81 f0       	breq	.+32     	; 0x2182 <DIO_SetPortValue+0x68>
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	9d 81       	ldd	r25, Y+5	; 0x05
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	91 05       	cpc	r25, r1
    216a:	81 f0       	breq	.+32     	; 0x218c <DIO_SetPortValue+0x72>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <DIO_SetPortValue+0x7c>
	{
	case PORTA : PORTA_BASE_PTR->PORT = u8Value; break;
    216e:	e9 e3       	ldi	r30, 0x39	; 57
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	82 83       	std	Z+2, r24	; 0x02
    2176:	11 c0       	rjmp	.+34     	; 0x219a <DIO_SetPortValue+0x80>
	case PORTB : PORTB_BASE_PTR->PORT = u8Value; break;
    2178:	e6 e3       	ldi	r30, 0x36	; 54
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	82 83       	std	Z+2, r24	; 0x02
    2180:	0c c0       	rjmp	.+24     	; 0x219a <DIO_SetPortValue+0x80>
	case PORTC : PORTC_BASE_PTR->PORT = u8Value; break;
    2182:	e3 e3       	ldi	r30, 0x33	; 51
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	82 83       	std	Z+2, r24	; 0x02
    218a:	07 c0       	rjmp	.+14     	; 0x219a <DIO_SetPortValue+0x80>
	case PORTD : PORTD_BASE_PTR->PORT = u8Value; break;
    218c:	e0 e3       	ldi	r30, 0x30	; 48
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	82 83       	std	Z+2, r24	; 0x02
    2194:	02 c0       	rjmp	.+4      	; 0x219a <DIO_SetPortValue+0x80>
	default: Local_u8ErrorState= PORT_NOT_FOUND;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <DIO_SetPinValue>:
* DIO_SetPinValue(PORTB, PIN1 , HIGH);
* @endcode
**********************************************************************/

ErrorState_t DIO_SetPinValue(DioPort_t Port,DioPin_t Pin, DioState_t State)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	28 97       	sbiw	r28, 0x08	; 8
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	8a 83       	std	Y+2, r24	; 0x02
    21c2:	6b 83       	std	Y+3, r22	; 0x03
    21c4:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE;
    21c6:	8a e0       	ldi	r24, 0x0A	; 10
    21c8:	89 83       	std	Y+1, r24	; 0x01

	if(Pin<= PIN7)
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	88 30       	cpi	r24, 0x08	; 8
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <DIO_SetPinValue+0x26>
    21d0:	05 c1       	rjmp	.+522    	; 0x23dc <DIO_SetPinValue+0x230>
	{
		if(State==DIO_LOW)
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	88 23       	and	r24, r24
    21d6:	09 f0       	breq	.+2      	; 0x21da <DIO_SetPinValue+0x2e>
    21d8:	7f c0       	rjmp	.+254    	; 0x22d8 <DIO_SetPinValue+0x12c>
		{
			switch(Port)
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	38 87       	std	Y+8, r19	; 0x08
    21e2:	2f 83       	std	Y+7, r18	; 0x07
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	98 85       	ldd	r25, Y+8	; 0x08
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	91 05       	cpc	r25, r1
    21ec:	69 f1       	breq	.+90     	; 0x2248 <DIO_SetPinValue+0x9c>
    21ee:	2f 81       	ldd	r18, Y+7	; 0x07
    21f0:	38 85       	ldd	r19, Y+8	; 0x08
    21f2:	22 30       	cpi	r18, 0x02	; 2
    21f4:	31 05       	cpc	r19, r1
    21f6:	2c f4       	brge	.+10     	; 0x2202 <DIO_SetPinValue+0x56>
    21f8:	8f 81       	ldd	r24, Y+7	; 0x07
    21fa:	98 85       	ldd	r25, Y+8	; 0x08
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	69 f0       	breq	.+26     	; 0x221a <DIO_SetPinValue+0x6e>
    2200:	68 c0       	rjmp	.+208    	; 0x22d2 <DIO_SetPinValue+0x126>
    2202:	2f 81       	ldd	r18, Y+7	; 0x07
    2204:	38 85       	ldd	r19, Y+8	; 0x08
    2206:	22 30       	cpi	r18, 0x02	; 2
    2208:	31 05       	cpc	r19, r1
    220a:	a9 f1       	breq	.+106    	; 0x2276 <DIO_SetPinValue+0xca>
    220c:	8f 81       	ldd	r24, Y+7	; 0x07
    220e:	98 85       	ldd	r25, Y+8	; 0x08
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	91 05       	cpc	r25, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <DIO_SetPinValue+0x6c>
    2216:	46 c0       	rjmp	.+140    	; 0x22a4 <DIO_SetPinValue+0xf8>
    2218:	5c c0       	rjmp	.+184    	; 0x22d2 <DIO_SetPinValue+0x126>
			{
			case PORTA: CLR_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    221a:	a9 e3       	ldi	r26, 0x39	; 57
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e9 e3       	ldi	r30, 0x39	; 57
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	48 2f       	mov	r20, r24
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 2e       	mov	r0, r18
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <DIO_SetPinValue+0x8c>
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	0a 94       	dec	r0
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <DIO_SetPinValue+0x88>
    223c:	80 95       	com	r24
    223e:	84 23       	and	r24, r20
    2240:	12 96       	adiw	r26, 0x02	; 2
    2242:	8c 93       	st	X, r24
    2244:	12 97       	sbiw	r26, 0x02	; 2
    2246:	cb c0       	rjmp	.+406    	; 0x23de <DIO_SetPinValue+0x232>
			case PORTB: CLR_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    2248:	a6 e3       	ldi	r26, 0x36	; 54
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e6 e3       	ldi	r30, 0x36	; 54
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	48 2f       	mov	r20, r24
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	02 2e       	mov	r0, r18
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <DIO_SetPinValue+0xba>
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	0a 94       	dec	r0
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <DIO_SetPinValue+0xb6>
    226a:	80 95       	com	r24
    226c:	84 23       	and	r24, r20
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	8c 93       	st	X, r24
    2272:	12 97       	sbiw	r26, 0x02	; 2
    2274:	b4 c0       	rjmp	.+360    	; 0x23de <DIO_SetPinValue+0x232>
			case PORTC: CLR_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    2276:	a3 e3       	ldi	r26, 0x33	; 51
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e3 e3       	ldi	r30, 0x33	; 51
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	48 2f       	mov	r20, r24
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 2e       	mov	r0, r18
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_SetPinValue+0xe8>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_SetPinValue+0xe4>
    2298:	80 95       	com	r24
    229a:	84 23       	and	r24, r20
    229c:	12 96       	adiw	r26, 0x02	; 2
    229e:	8c 93       	st	X, r24
    22a0:	12 97       	sbiw	r26, 0x02	; 2
    22a2:	9d c0       	rjmp	.+314    	; 0x23de <DIO_SetPinValue+0x232>
			case PORTD: CLR_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    22a4:	a0 e3       	ldi	r26, 0x30	; 48
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e0 e3       	ldi	r30, 0x30	; 48
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	48 2f       	mov	r20, r24
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <DIO_SetPinValue+0x116>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <DIO_SetPinValue+0x112>
    22c6:	80 95       	com	r24
    22c8:	84 23       	and	r24, r20
    22ca:	12 96       	adiw	r26, 0x02	; 2
    22cc:	8c 93       	st	X, r24
    22ce:	12 97       	sbiw	r26, 0x02	; 2
    22d0:	86 c0       	rjmp	.+268    	; 0x23de <DIO_SetPinValue+0x232>
			default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	83 c0       	rjmp	.+262    	; 0x23de <DIO_SetPinValue+0x232>
			}
		}
		else if (State==DIO_HIGH)
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <DIO_SetPinValue+0x134>
    22de:	7b c0       	rjmp	.+246    	; 0x23d6 <DIO_SetPinValue+0x22a>
		{
			switch(Port)
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	3e 83       	std	Y+6, r19	; 0x06
    22e8:	2d 83       	std	Y+5, r18	; 0x05
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	91 05       	cpc	r25, r1
    22f2:	61 f1       	breq	.+88     	; 0x234c <DIO_SetPinValue+0x1a0>
    22f4:	2d 81       	ldd	r18, Y+5	; 0x05
    22f6:	3e 81       	ldd	r19, Y+6	; 0x06
    22f8:	22 30       	cpi	r18, 0x02	; 2
    22fa:	31 05       	cpc	r19, r1
    22fc:	2c f4       	brge	.+10     	; 0x2308 <DIO_SetPinValue+0x15c>
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	69 f0       	breq	.+26     	; 0x2320 <DIO_SetPinValue+0x174>
    2306:	64 c0       	rjmp	.+200    	; 0x23d0 <DIO_SetPinValue+0x224>
    2308:	2d 81       	ldd	r18, Y+5	; 0x05
    230a:	3e 81       	ldd	r19, Y+6	; 0x06
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	99 f1       	breq	.+102    	; 0x2378 <DIO_SetPinValue+0x1cc>
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	91 05       	cpc	r25, r1
    231a:	09 f4       	brne	.+2      	; 0x231e <DIO_SetPinValue+0x172>
    231c:	43 c0       	rjmp	.+134    	; 0x23a4 <DIO_SetPinValue+0x1f8>
    231e:	58 c0       	rjmp	.+176    	; 0x23d0 <DIO_SetPinValue+0x224>
			{
			case PORTA: SET_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    2320:	a9 e3       	ldi	r26, 0x39	; 57
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e9 e3       	ldi	r30, 0x39	; 57
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	48 2f       	mov	r20, r24
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	02 2e       	mov	r0, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <DIO_SetPinValue+0x192>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <DIO_SetPinValue+0x18e>
    2342:	84 2b       	or	r24, r20
    2344:	12 96       	adiw	r26, 0x02	; 2
    2346:	8c 93       	st	X, r24
    2348:	12 97       	sbiw	r26, 0x02	; 2
    234a:	49 c0       	rjmp	.+146    	; 0x23de <DIO_SetPinValue+0x232>
			case PORTB: SET_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    234c:	a6 e3       	ldi	r26, 0x36	; 54
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e6 e3       	ldi	r30, 0x36	; 54
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	48 2f       	mov	r20, r24
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 2e       	mov	r0, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <DIO_SetPinValue+0x1be>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <DIO_SetPinValue+0x1ba>
    236e:	84 2b       	or	r24, r20
    2370:	12 96       	adiw	r26, 0x02	; 2
    2372:	8c 93       	st	X, r24
    2374:	12 97       	sbiw	r26, 0x02	; 2
    2376:	33 c0       	rjmp	.+102    	; 0x23de <DIO_SetPinValue+0x232>
			case PORTC: SET_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    2378:	a3 e3       	ldi	r26, 0x33	; 51
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e3 e3       	ldi	r30, 0x33	; 51
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	48 2f       	mov	r20, r24
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	02 2e       	mov	r0, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <DIO_SetPinValue+0x1ea>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <DIO_SetPinValue+0x1e6>
    239a:	84 2b       	or	r24, r20
    239c:	12 96       	adiw	r26, 0x02	; 2
    239e:	8c 93       	st	X, r24
    23a0:	12 97       	sbiw	r26, 0x02	; 2
    23a2:	1d c0       	rjmp	.+58     	; 0x23de <DIO_SetPinValue+0x232>
			case PORTD: SET_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    23a4:	a0 e3       	ldi	r26, 0x30	; 48
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e0 e3       	ldi	r30, 0x30	; 48
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	48 2f       	mov	r20, r24
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 2e       	mov	r0, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <DIO_SetPinValue+0x216>
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <DIO_SetPinValue+0x212>
    23c6:	84 2b       	or	r24, r20
    23c8:	12 96       	adiw	r26, 0x02	; 2
    23ca:	8c 93       	st	X, r24
    23cc:	12 97       	sbiw	r26, 0x02	; 2
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <DIO_SetPinValue+0x232>
			default: Local_u8ErrorState = PORT_NOT_FOUND; break;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <DIO_SetPinValue+0x232>
			}
		}
		else
		{
			Local_u8ErrorState = STATE_NOT_AVALIABLE;
    23d6:	84 e0       	ldi	r24, 0x04	; 4
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	01 c0       	rjmp	.+2      	; 0x23de <DIO_SetPinValue+0x232>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    23dc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e0:	28 96       	adiw	r28, 0x08	; 8
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <DIO_TogglePinValue>:
* @endcode
***************************************************/


ErrorState_t DIO_TogglePinValue(DioPort_t Port,DioPin_t Pin)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <DIO_TogglePinValue+0x6>
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <DIO_TogglePinValue+0x8>
    23fa:	0f 92       	push	r0
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	8a 83       	std	Y+2, r24	; 0x02
    2402:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_u8ErrorState= DONE ;
    2404:	8a e0       	ldi	r24, 0x0A	; 10
    2406:	89 83       	std	Y+1, r24	; 0x01
	if(Pin<= PIN7)
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	88 30       	cpi	r24, 0x08	; 8
    240c:	08 f0       	brcs	.+2      	; 0x2410 <DIO_TogglePinValue+0x1e>
    240e:	7b c0       	rjmp	.+246    	; 0x2506 <DIO_TogglePinValue+0x114>
	{
		switch(Port)
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	3d 83       	std	Y+5, r19	; 0x05
    2418:	2c 83       	std	Y+4, r18	; 0x04
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	91 05       	cpc	r25, r1
    2422:	61 f1       	breq	.+88     	; 0x247c <DIO_TogglePinValue+0x8a>
    2424:	2c 81       	ldd	r18, Y+4	; 0x04
    2426:	3d 81       	ldd	r19, Y+5	; 0x05
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	2c f4       	brge	.+10     	; 0x2438 <DIO_TogglePinValue+0x46>
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	69 f0       	breq	.+26     	; 0x2450 <DIO_TogglePinValue+0x5e>
    2436:	64 c0       	rjmp	.+200    	; 0x2500 <DIO_TogglePinValue+0x10e>
    2438:	2c 81       	ldd	r18, Y+4	; 0x04
    243a:	3d 81       	ldd	r19, Y+5	; 0x05
    243c:	22 30       	cpi	r18, 0x02	; 2
    243e:	31 05       	cpc	r19, r1
    2440:	99 f1       	breq	.+102    	; 0x24a8 <DIO_TogglePinValue+0xb6>
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	9d 81       	ldd	r25, Y+5	; 0x05
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	91 05       	cpc	r25, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <DIO_TogglePinValue+0x5c>
    244c:	43 c0       	rjmp	.+134    	; 0x24d4 <DIO_TogglePinValue+0xe2>
    244e:	58 c0       	rjmp	.+176    	; 0x2500 <DIO_TogglePinValue+0x10e>
		{
		case PORTA: TOG_BIT(PORTA_BASE_PTR->PORT,Pin); break;
    2450:	a9 e3       	ldi	r26, 0x39	; 57
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e9 e3       	ldi	r30, 0x39	; 57
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	48 2f       	mov	r20, r24
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 2e       	mov	r0, r18
    2468:	02 c0       	rjmp	.+4      	; 0x246e <DIO_TogglePinValue+0x7c>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	0a 94       	dec	r0
    2470:	e2 f7       	brpl	.-8      	; 0x246a <DIO_TogglePinValue+0x78>
    2472:	84 27       	eor	r24, r20
    2474:	12 96       	adiw	r26, 0x02	; 2
    2476:	8c 93       	st	X, r24
    2478:	12 97       	sbiw	r26, 0x02	; 2
    247a:	46 c0       	rjmp	.+140    	; 0x2508 <DIO_TogglePinValue+0x116>
		case PORTB: TOG_BIT(PORTB_BASE_PTR->PORT,Pin); break;
    247c:	a6 e3       	ldi	r26, 0x36	; 54
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e6 e3       	ldi	r30, 0x36	; 54
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	48 2f       	mov	r20, r24
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 2e       	mov	r0, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <DIO_TogglePinValue+0xa8>
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	0a 94       	dec	r0
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <DIO_TogglePinValue+0xa4>
    249e:	84 27       	eor	r24, r20
    24a0:	12 96       	adiw	r26, 0x02	; 2
    24a2:	8c 93       	st	X, r24
    24a4:	12 97       	sbiw	r26, 0x02	; 2
    24a6:	30 c0       	rjmp	.+96     	; 0x2508 <DIO_TogglePinValue+0x116>
		case PORTC: TOG_BIT(PORTC_BASE_PTR->PORT,Pin); break;
    24a8:	a3 e3       	ldi	r26, 0x33	; 51
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e3 e3       	ldi	r30, 0x33	; 51
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	48 2f       	mov	r20, r24
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	02 2e       	mov	r0, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <DIO_TogglePinValue+0xd4>
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <DIO_TogglePinValue+0xd0>
    24ca:	84 27       	eor	r24, r20
    24cc:	12 96       	adiw	r26, 0x02	; 2
    24ce:	8c 93       	st	X, r24
    24d0:	12 97       	sbiw	r26, 0x02	; 2
    24d2:	1a c0       	rjmp	.+52     	; 0x2508 <DIO_TogglePinValue+0x116>
		case PORTD: TOG_BIT(PORTD_BASE_PTR->PORT,Pin); break;
    24d4:	a0 e3       	ldi	r26, 0x30	; 48
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e0 e3       	ldi	r30, 0x30	; 48
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	48 2f       	mov	r20, r24
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <DIO_TogglePinValue+0x100>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <DIO_TogglePinValue+0xfc>
    24f6:	84 27       	eor	r24, r20
    24f8:	12 96       	adiw	r26, 0x02	; 2
    24fa:	8c 93       	st	X, r24
    24fc:	12 97       	sbiw	r26, 0x02	; 2
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <DIO_TogglePinValue+0x116>
		default: Local_u8ErrorState = PORT_NOT_FOUND ; break;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <DIO_TogglePinValue+0x116>
		}
	}
	else
	{
		Local_u8ErrorState = PIN_NOT_FOUND;
    2506:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2508:	89 81       	ldd	r24, Y+1	; 0x01

}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <DIO_GetPinValue>:
* uint8_t value;
* uint8_t pinstate = DIO_GetPinValue(PORTA,PIN0,&value);
* @endcode
******************************************************************************/
ErrorState_t DIO_GetPinValue(DioPort_t Port,DioPin_t Pin, uint8_t* pu8Value)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	27 97       	sbiw	r28, 0x07	; 7
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	6b 83       	std	Y+3, r22	; 0x03
    2532:	5d 83       	std	Y+5, r21	; 0x05
    2534:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState_t Local_u8ErrorState = DONE ;
    2536:	8a e0       	ldi	r24, 0x0A	; 10
    2538:	89 83       	std	Y+1, r24	; 0x01

	if(pu8Value!=NULL)
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	09 f4       	brne	.+2      	; 0x2544 <DIO_GetPinValue+0x2a>
    2542:	7a c0       	rjmp	.+244    	; 0x2638 <DIO_GetPinValue+0x11e>
	{
		if( (Pin<=PIN7))
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	88 30       	cpi	r24, 0x08	; 8
    2548:	08 f0       	brcs	.+2      	; 0x254c <DIO_GetPinValue+0x32>
    254a:	74 c0       	rjmp	.+232    	; 0x2634 <DIO_GetPinValue+0x11a>
		{
			switch(Port)
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	3f 83       	std	Y+7, r19	; 0x07
    2554:	2e 83       	std	Y+6, r18	; 0x06
    2556:	4e 81       	ldd	r20, Y+6	; 0x06
    2558:	5f 81       	ldd	r21, Y+7	; 0x07
    255a:	41 30       	cpi	r20, 0x01	; 1
    255c:	51 05       	cpc	r21, r1
    255e:	59 f1       	breq	.+86     	; 0x25b6 <DIO_GetPinValue+0x9c>
    2560:	8e 81       	ldd	r24, Y+6	; 0x06
    2562:	9f 81       	ldd	r25, Y+7	; 0x07
    2564:	82 30       	cpi	r24, 0x02	; 2
    2566:	91 05       	cpc	r25, r1
    2568:	34 f4       	brge	.+12     	; 0x2576 <DIO_GetPinValue+0x5c>
    256a:	2e 81       	ldd	r18, Y+6	; 0x06
    256c:	3f 81       	ldd	r19, Y+7	; 0x07
    256e:	21 15       	cp	r18, r1
    2570:	31 05       	cpc	r19, r1
    2572:	69 f0       	breq	.+26     	; 0x258e <DIO_GetPinValue+0x74>
    2574:	5c c0       	rjmp	.+184    	; 0x262e <DIO_GetPinValue+0x114>
    2576:	4e 81       	ldd	r20, Y+6	; 0x06
    2578:	5f 81       	ldd	r21, Y+7	; 0x07
    257a:	42 30       	cpi	r20, 0x02	; 2
    257c:	51 05       	cpc	r21, r1
    257e:	79 f1       	breq	.+94     	; 0x25de <DIO_GetPinValue+0xc4>
    2580:	8e 81       	ldd	r24, Y+6	; 0x06
    2582:	9f 81       	ldd	r25, Y+7	; 0x07
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	91 05       	cpc	r25, r1
    2588:	09 f4       	brne	.+2      	; 0x258c <DIO_GetPinValue+0x72>
    258a:	3d c0       	rjmp	.+122    	; 0x2606 <DIO_GetPinValue+0xec>
    258c:	50 c0       	rjmp	.+160    	; 0x262e <DIO_GetPinValue+0x114>
			{
			case PORTA : *pu8Value= GET_BIT(PORTA_BASE_PTR->PIN ,Pin); break;
    258e:	e9 e3       	ldi	r30, 0x39	; 57
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a9 01       	movw	r20, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <DIO_GetPinValue+0x8c>
    25a2:	55 95       	asr	r21
    25a4:	47 95       	ror	r20
    25a6:	8a 95       	dec	r24
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <DIO_GetPinValue+0x88>
    25aa:	ca 01       	movw	r24, r20
    25ac:	81 70       	andi	r24, 0x01	; 1
    25ae:	ec 81       	ldd	r30, Y+4	; 0x04
    25b0:	fd 81       	ldd	r31, Y+5	; 0x05
    25b2:	80 83       	st	Z, r24
    25b4:	43 c0       	rjmp	.+134    	; 0x263c <DIO_GetPinValue+0x122>
			case PORTB : *pu8Value= GET_BIT(PORTB_BASE_PTR->PIN ,Pin); break;
    25b6:	e6 e3       	ldi	r30, 0x36	; 54
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a9 01       	movw	r20, r18
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <DIO_GetPinValue+0xb4>
    25ca:	55 95       	asr	r21
    25cc:	47 95       	ror	r20
    25ce:	8a 95       	dec	r24
    25d0:	e2 f7       	brpl	.-8      	; 0x25ca <DIO_GetPinValue+0xb0>
    25d2:	ca 01       	movw	r24, r20
    25d4:	81 70       	andi	r24, 0x01	; 1
    25d6:	ec 81       	ldd	r30, Y+4	; 0x04
    25d8:	fd 81       	ldd	r31, Y+5	; 0x05
    25da:	80 83       	st	Z, r24
    25dc:	2f c0       	rjmp	.+94     	; 0x263c <DIO_GetPinValue+0x122>
			case PORTC : *pu8Value= GET_BIT(PORTC_BASE_PTR->PIN ,Pin); break;
    25de:	e3 e3       	ldi	r30, 0x33	; 51
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a9 01       	movw	r20, r18
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <DIO_GetPinValue+0xdc>
    25f2:	55 95       	asr	r21
    25f4:	47 95       	ror	r20
    25f6:	8a 95       	dec	r24
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <DIO_GetPinValue+0xd8>
    25fa:	ca 01       	movw	r24, r20
    25fc:	81 70       	andi	r24, 0x01	; 1
    25fe:	ec 81       	ldd	r30, Y+4	; 0x04
    2600:	fd 81       	ldd	r31, Y+5	; 0x05
    2602:	80 83       	st	Z, r24
    2604:	1b c0       	rjmp	.+54     	; 0x263c <DIO_GetPinValue+0x122>
			case PORTD : *pu8Value= GET_BIT(PORTD_BASE_PTR->PIN ,Pin); break;
    2606:	e0 e3       	ldi	r30, 0x30	; 48
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a9 01       	movw	r20, r18
    2618:	02 c0       	rjmp	.+4      	; 0x261e <DIO_GetPinValue+0x104>
    261a:	55 95       	asr	r21
    261c:	47 95       	ror	r20
    261e:	8a 95       	dec	r24
    2620:	e2 f7       	brpl	.-8      	; 0x261a <DIO_GetPinValue+0x100>
    2622:	ca 01       	movw	r24, r20
    2624:	81 70       	andi	r24, 0x01	; 1
    2626:	ec 81       	ldd	r30, Y+4	; 0x04
    2628:	fd 81       	ldd	r31, Y+5	; 0x05
    262a:	80 83       	st	Z, r24
    262c:	07 c0       	rjmp	.+14     	; 0x263c <DIO_GetPinValue+0x122>
			default: Local_u8ErrorState = PORT_NOT_FOUND ;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	04 c0       	rjmp	.+8      	; 0x263c <DIO_GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = PIN_NOT_FOUND ;
    2634:	19 82       	std	Y+1, r1	; 0x01
    2636:	02 c0       	rjmp	.+4      	; 0x263c <DIO_GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULLPTR;
    2638:	85 e0       	ldi	r24, 0x05	; 5
    263a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    263c:	89 81       	ldd	r24, Y+1	; 0x01
}
    263e:	27 96       	adiw	r28, 0x07	; 7
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <DIO_Init>:
* @endcode
*
**************************************************************************************************************************/

ErrorState_t DIO_Init(const DioConfig_t * const  Config)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	00 d0       	rcall	.+0      	; 0x2656 <DIO_Init+0x6>
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	9b 83       	std	Y+3, r25	; 0x03
    265e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_u8ErrorState = 4;
    2660:	84 e0       	ldi	r24, 0x04	; 4
    2662:	89 83       	std	Y+1, r24	; 0x01


	if(Config != NULL)
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	71 f0       	breq	.+28     	; 0x2688 <DIO_Init+0x38>
	{

		DIO_SetPinDirection(Config->Port,Config->Pin,Config->Mode);
    266c:	ea 81       	ldd	r30, Y+2	; 0x02
    266e:	fb 81       	ldd	r31, Y+3	; 0x03
    2670:	80 81       	ld	r24, Z
    2672:	ea 81       	ldd	r30, Y+2	; 0x02
    2674:	fb 81       	ldd	r31, Y+3	; 0x03
    2676:	21 81       	ldd	r18, Z+1	; 0x01
    2678:	ea 81       	ldd	r30, Y+2	; 0x02
    267a:	fb 81       	ldd	r31, Y+3	; 0x03
    267c:	92 81       	ldd	r25, Z+2	; 0x02
    267e:	62 2f       	mov	r22, r18
    2680:	49 2f       	mov	r20, r25
    2682:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <DIO_SetPinDirection>
    2686:	02 c0       	rjmp	.+4      	; 0x268c <DIO_Init+0x3c>


	}
	else
	{
		Local_u8ErrorState = NULLPTR;
    2688:	85 e0       	ldi	r24, 0x05	; 5
    268a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    268c:	89 81       	ldd	r24, Y+1	; 0x01

}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    26a2:	af e5       	ldi	r26, 0x5F	; 95
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	ef e5       	ldi	r30, 0x5F	; 95
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	80 68       	ori	r24, 0x80	; 128
    26ae:	8c 93       	st	X, r24
}
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    26be:	af e5       	ldi	r26, 0x5F	; 95
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	ef e5       	ldi	r30, 0x5F	; 95
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	8f 77       	andi	r24, 0x7F	; 127
    26ca:	8c 93       	st	X, r24

}
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_private.h"


uint8_t  KPD_u8GetPressedKey(void)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <KPD_u8GetPressedKey+0x6>
    26d8:	00 d0       	rcall	.+0      	; 0x26da <KPD_u8GetPressedKey+0x8>
    26da:	0f 92       	push	r0
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
	/*Initialize the state of keys that not pressed */
	uint8_t Local_u8PressedKey = KPD_NO_PRESSED_KEY ,Local_u8PinState,Local_u8ColumnId,Local_u8RowId;
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
    26e2:	8b 83       	std	Y+3, r24	; 0x03
			                                     KPD_ROW2_PIN,
			                                     KPD_ROW3_PIN};


	/*Scanning the keypad */
	for( Local_u8ColumnId = 0 ; Local_u8ColumnId < COLUMN_NUM ; Local_u8ColumnId++)
    26e4:	1a 82       	std	Y+2, r1	; 0x02
    26e6:	5e c0       	rjmp	.+188    	; 0x27a4 <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current column */
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_LOW);
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	fc 01       	movw	r30, r24
    26f0:	e1 57       	subi	r30, 0x71	; 113
    26f2:	fe 4f       	sbci	r31, 0xFE	; 254
    26f4:	90 81       	ld	r25, Z
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	69 2f       	mov	r22, r25
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>

		for( Local_u8RowId = 0 ; Local_u8RowId < ROW_NUM ; Local_u8RowId++)
    2700:	19 82       	std	Y+1, r1	; 0x01
    2702:	3d c0       	rjmp	.+122    	; 0x277e <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowId],&Local_u8PinState);
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	fc 01       	movw	r30, r24
    270c:	e5 57       	subi	r30, 0x75	; 117
    270e:	fe 4f       	sbci	r31, 0xFE	; 254
    2710:	90 81       	ld	r25, Z
    2712:	9e 01       	movw	r18, r28
    2714:	2c 5f       	subi	r18, 0xFC	; 252
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	69 2f       	mov	r22, r25
    271c:	a9 01       	movw	r20, r18
    271e:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_GetPinValue>

			/* check if switch is pressed */
			if(DIO_LOW == Local_u8PinState)
    2722:	8c 81       	ldd	r24, Y+4	; 0x04
    2724:	88 23       	and	r24, r24
    2726:	41 f5       	brne	.+80     	; 0x2778 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowId][ Local_u8ColumnId] ;
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	48 2f       	mov	r20, r24
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	ca 01       	movw	r24, r20
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	82 0f       	add	r24, r18
    2740:	93 1f       	adc	r25, r19
    2742:	fc 01       	movw	r30, r24
    2744:	ed 56       	subi	r30, 0x6D	; 109
    2746:	fe 4f       	sbci	r31, 0xFE	; 254
    2748:	80 81       	ld	r24, Z
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	0f c0       	rjmp	.+30     	; 0x276c <KPD_u8GetPressedKey+0x9a>

				/* polling (busy waiting ) until the key is released */
				while(DIO_LOW == Local_u8PinState)
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowId],&Local_u8PinState);
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	88 2f       	mov	r24, r24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	fc 01       	movw	r30, r24
    2756:	e5 57       	subi	r30, 0x75	; 117
    2758:	fe 4f       	sbci	r31, 0xFE	; 254
    275a:	90 81       	ld	r25, Z
    275c:	9e 01       	movw	r18, r28
    275e:	2c 5f       	subi	r18, 0xFC	; 252
    2760:	3f 4f       	sbci	r19, 0xFF	; 255
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	69 2f       	mov	r22, r25
    2766:	a9 01       	movw	r20, r18
    2768:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_GetPinValue>
			if(DIO_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowId][ Local_u8ColumnId] ;

				/* polling (busy waiting ) until the key is released */
				while(DIO_LOW == Local_u8PinState)
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	88 23       	and	r24, r24
    2770:	71 f3       	breq	.-36     	; 0x274e <KPD_u8GetPressedKey+0x7c>
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowId],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	1c c0       	rjmp	.+56     	; 0x27b0 <KPD_u8GetPressedKey+0xde>
	for( Local_u8ColumnId = 0 ; Local_u8ColumnId < COLUMN_NUM ; Local_u8ColumnId++)
	{
		/* Activate current column */
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_LOW);

		for( Local_u8RowId = 0 ; Local_u8RowId < ROW_NUM ; Local_u8RowId++)
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	84 30       	cpi	r24, 0x04	; 4
    2782:	08 f4       	brcc	.+2      	; 0x2786 <KPD_u8GetPressedKey+0xb4>
    2784:	bf cf       	rjmp	.-130    	; 0x2704 <KPD_u8GetPressedKey+0x32>
			}

		}

		/* Deactivate current column */
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_HIGH);
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	fc 01       	movw	r30, r24
    278e:	e1 57       	subi	r30, 0x71	; 113
    2790:	fe 4f       	sbci	r31, 0xFE	; 254
    2792:	90 81       	ld	r25, Z
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	69 2f       	mov	r22, r25
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
			                                     KPD_ROW2_PIN,
			                                     KPD_ROW3_PIN};


	/*Scanning the keypad */
	for( Local_u8ColumnId = 0 ; Local_u8ColumnId < COLUMN_NUM ; Local_u8ColumnId++)
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	8f 5f       	subi	r24, 0xFF	; 255
    27a2:	8a 83       	std	Y+2, r24	; 0x02
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	84 30       	cpi	r24, 0x04	; 4
    27a8:	08 f4       	brcc	.+2      	; 0x27ac <KPD_u8GetPressedKey+0xda>
    27aa:	9e cf       	rjmp	.-196    	; 0x26e8 <KPD_u8GetPressedKey+0x16>
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnId],DIO_HIGH);

	}


	return Local_u8PressedKey;
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	8d 83       	std	Y+5, r24	; 0x05
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05


}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <L298_runMotorCW>:
 *@param speed
 *
 *@return void
 */

ErrorState_t L298_runMotorCW(Motor_Config_t *Motor,uint8_t Speed){
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <L298_runMotorCW+0x6>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <L298_runMotorCW+0x8>
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	9b 83       	std	Y+3, r25	; 0x03
    27d0:	8a 83       	std	Y+2, r24	; 0x02
    27d2:	6c 83       	std	Y+4, r22	; 0x04
	ErrorState_t Local_Error = DONE;
    27d4:	8a e0       	ldi	r24, 0x0A	; 10
    27d6:	89 83       	std	Y+1, r24	; 0x01

	if(Motor != NULL)
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	9b 81       	ldd	r25, Y+3	; 0x03
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	c1 f1       	breq	.+112    	; 0x2850 <L298_runMotorCW+0x8e>
	{
		/* Check channel to set PWM that control speed */
		if(Motor->MOTOR_EN == CHANNEL_A){
    27e0:	ea 81       	ldd	r30, Y+2	; 0x02
    27e2:	fb 81       	ldd	r31, Y+3	; 0x03
    27e4:	83 81       	ldd	r24, Z+3	; 0x03
    27e6:	88 23       	and	r24, r24
    27e8:	29 f4       	brne	.+10     	; 0x27f4 <L298_runMotorCW+0x32>

		PWM_SetDutyCycleChannelA(Speed,FAST_PWM_8Bit);
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <PWM_SetDutyCycleChannelA>
    27f2:	19 c0       	rjmp	.+50     	; 0x2826 <L298_runMotorCW+0x64>
		}
		else if(Motor->MOTOR_EN == CHANNEL_B){
    27f4:	ea 81       	ldd	r30, Y+2	; 0x02
    27f6:	fb 81       	ldd	r31, Y+3	; 0x03
    27f8:	83 81       	ldd	r24, Z+3	; 0x03
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	29 f4       	brne	.+10     	; 0x2808 <L298_runMotorCW+0x46>
			PWM_SetDutyCycleChannelB(Speed,FAST_PWM_8Bit);
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	0e 94 d7 15 	call	0x2bae	; 0x2bae <PWM_SetDutyCycleChannelB>
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <L298_runMotorCW+0x64>
		}
		else if (Motor->MOTOR_EN == BOTH_A_B)
    2808:	ea 81       	ldd	r30, Y+2	; 0x02
    280a:	fb 81       	ldd	r31, Y+3	; 0x03
    280c:	83 81       	ldd	r24, Z+3	; 0x03
    280e:	82 30       	cpi	r24, 0x02	; 2
    2810:	49 f4       	brne	.+18     	; 0x2824 <L298_runMotorCW+0x62>
		{
			PWM_SetDutyCycleChannelA(Speed,FAST_PWM_8Bit);
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <PWM_SetDutyCycleChannelA>
			PWM_SetDutyCycleChannelB(Speed,FAST_PWM_8Bit);
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <PWM_SetDutyCycleChannelB>
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <L298_runMotorCW+0x64>
		}
		else {
			Local_Error = PIN_NOT_FOUND;
    2824:	19 82       	std	Y+1, r1	; 0x01
			}
		/*Set the Dirction for Motor*/

		DIO_SetPinValue(Motor->MOTOR_PORT,Motor->MOTOR_IN1,DIO_HIGH);
    2826:	ea 81       	ldd	r30, Y+2	; 0x02
    2828:	fb 81       	ldd	r31, Y+3	; 0x03
    282a:	80 81       	ld	r24, Z
    282c:	ea 81       	ldd	r30, Y+2	; 0x02
    282e:	fb 81       	ldd	r31, Y+3	; 0x03
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	69 2f       	mov	r22, r25
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
		DIO_SetPinValue(Motor->MOTOR_PORT,Motor->MOTOR_IN2,DIO_LOW);
    283a:	ea 81       	ldd	r30, Y+2	; 0x02
    283c:	fb 81       	ldd	r31, Y+3	; 0x03
    283e:	80 81       	ld	r24, Z
    2840:	ea 81       	ldd	r30, Y+2	; 0x02
    2842:	fb 81       	ldd	r31, Y+3	; 0x03
    2844:	92 81       	ldd	r25, Z+2	; 0x02
    2846:	69 2f       	mov	r22, r25
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <L298_runMotorCW+0x92>

	}
	else {
		Local_Error = NULLPTR;
    2850:	85 e0       	ldi	r24, 0x05	; 5
    2852:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Error;
    2854:	89 81       	ldd	r24, Y+1	; 0x01
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <L298_runMotorACW>:
 *@param Motor
 *@param speed
 *
 *@return void
 *************************************************************************************/
ErrorState_t L298_runMotorACW(Motor_Config_t *Motor,uint8_t Speed){
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	00 d0       	rcall	.+0      	; 0x286a <L298_runMotorACW+0x6>
    286a:	00 d0       	rcall	.+0      	; 0x286c <L298_runMotorACW+0x8>
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	9b 83       	std	Y+3, r25	; 0x03
    2872:	8a 83       	std	Y+2, r24	; 0x02
    2874:	6c 83       	std	Y+4, r22	; 0x04
	ErrorState_t Local_Error = DONE;
    2876:	8a e0       	ldi	r24, 0x0A	; 10
    2878:	89 83       	std	Y+1, r24	; 0x01

		if(Motor != NULL)
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	c1 f1       	breq	.+112    	; 0x28f2 <L298_runMotorACW+0x8e>
		{
			/* Check channel to set PWM that control speed */
			if(Motor->MOTOR_EN == CHANNEL_A){
    2882:	ea 81       	ldd	r30, Y+2	; 0x02
    2884:	fb 81       	ldd	r31, Y+3	; 0x03
    2886:	83 81       	ldd	r24, Z+3	; 0x03
    2888:	88 23       	and	r24, r24
    288a:	29 f4       	brne	.+10     	; 0x2896 <L298_runMotorACW+0x32>

			PWM_SetDutyCycleChannelA(Speed,FAST_PWM_8Bit);
    288c:	8c 81       	ldd	r24, Y+4	; 0x04
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <PWM_SetDutyCycleChannelA>
    2894:	19 c0       	rjmp	.+50     	; 0x28c8 <L298_runMotorACW+0x64>
			}
			else if(Motor->MOTOR_EN == CHANNEL_B){
    2896:	ea 81       	ldd	r30, Y+2	; 0x02
    2898:	fb 81       	ldd	r31, Y+3	; 0x03
    289a:	83 81       	ldd	r24, Z+3	; 0x03
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	29 f4       	brne	.+10     	; 0x28aa <L298_runMotorACW+0x46>
				PWM_SetDutyCycleChannelB(Speed,FAST_PWM_8Bit);
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <PWM_SetDutyCycleChannelB>
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <L298_runMotorACW+0x64>
			}
			else if (Motor->MOTOR_EN == BOTH_A_B)
    28aa:	ea 81       	ldd	r30, Y+2	; 0x02
    28ac:	fb 81       	ldd	r31, Y+3	; 0x03
    28ae:	83 81       	ldd	r24, Z+3	; 0x03
    28b0:	82 30       	cpi	r24, 0x02	; 2
    28b2:	49 f4       	brne	.+18     	; 0x28c6 <L298_runMotorACW+0x62>
			{
				PWM_SetDutyCycleChannelA(Speed,FAST_PWM_8Bit);
    28b4:	8c 81       	ldd	r24, Y+4	; 0x04
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <PWM_SetDutyCycleChannelA>
				PWM_SetDutyCycleChannelB(Speed,FAST_PWM_8Bit);
    28bc:	8c 81       	ldd	r24, Y+4	; 0x04
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <PWM_SetDutyCycleChannelB>
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <L298_runMotorACW+0x64>
			}
			else {
				Local_Error = PIN_NOT_FOUND;
    28c6:	19 82       	std	Y+1, r1	; 0x01
				}
			/*Set the Dirction for Motor*/

			DIO_SetPinValue(Motor->MOTOR_PORT,Motor->MOTOR_IN1,DIO_LOW);
    28c8:	ea 81       	ldd	r30, Y+2	; 0x02
    28ca:	fb 81       	ldd	r31, Y+3	; 0x03
    28cc:	80 81       	ld	r24, Z
    28ce:	ea 81       	ldd	r30, Y+2	; 0x02
    28d0:	fb 81       	ldd	r31, Y+3	; 0x03
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	69 2f       	mov	r22, r25
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
			DIO_SetPinValue(Motor->MOTOR_PORT,Motor->MOTOR_IN2,DIO_HIGH);
    28dc:	ea 81       	ldd	r30, Y+2	; 0x02
    28de:	fb 81       	ldd	r31, Y+3	; 0x03
    28e0:	80 81       	ld	r24, Z
    28e2:	ea 81       	ldd	r30, Y+2	; 0x02
    28e4:	fb 81       	ldd	r31, Y+3	; 0x03
    28e6:	92 81       	ldd	r25, Z+2	; 0x02
    28e8:	69 2f       	mov	r22, r25
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <L298_runMotorACW+0x92>

		}
		else {
			Local_Error = NULLPTR;
    28f2:	85 e0       	ldi	r24, 0x05	; 5
    28f4:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_Error;
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <L298_stopMotor>:
 *@param Motor
 *@param
 *
 *@return ErrorState_t
 *************************************************************************************/
ErrorState_t L298_stopMotor(Motor_Config_t *Motor){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <L298_stopMotor+0x6>
    290c:	0f 92       	push	r0
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	9b 83       	std	Y+3, r25	; 0x03
    2914:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState_t Local_Error = DONE;
    2916:	8a e0       	ldi	r24, 0x0A	; 10
    2918:	89 83       	std	Y+1, r24	; 0x01

	if(Motor != NULL){
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	a9 f0       	breq	.+42     	; 0x294c <L298_stopMotor+0x46>
	DIO_SetPinValue(Motor->MOTOR_PORT,Motor->MOTOR_IN1,DIO_HIGH);
    2922:	ea 81       	ldd	r30, Y+2	; 0x02
    2924:	fb 81       	ldd	r31, Y+3	; 0x03
    2926:	80 81       	ld	r24, Z
    2928:	ea 81       	ldd	r30, Y+2	; 0x02
    292a:	fb 81       	ldd	r31, Y+3	; 0x03
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	69 2f       	mov	r22, r25
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
	DIO_SetPinValue(Motor->MOTOR_PORT,Motor->MOTOR_IN2,DIO_HIGH);
    2936:	ea 81       	ldd	r30, Y+2	; 0x02
    2938:	fb 81       	ldd	r31, Y+3	; 0x03
    293a:	80 81       	ld	r24, Z
    293c:	ea 81       	ldd	r30, Y+2	; 0x02
    293e:	fb 81       	ldd	r31, Y+3	; 0x03
    2940:	92 81       	ldd	r25, Z+2	; 0x02
    2942:	69 2f       	mov	r22, r25
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_SetPinValue>
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <L298_stopMotor+0x4a>
	}
	else {
		Local_Error =NULLPTR;
    294c:	85 e0       	ldi	r24, 0x05	; 5
    294e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Error;
    2950:	89 81       	ldd	r24, Y+1	; 0x01

}
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <LM35_u8GetTempSync>:
 *
 *@return  error state

  **************************************************************************************************************************/

uint8_t LM35_u8GetTempSync(uint8_t channel , uint8_t * ptru8TempReading){
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	27 97       	sbiw	r28, 0x07	; 7
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	8d 83       	std	Y+5, r24	; 0x05
    2974:	7f 83       	std	Y+7, r23	; 0x07
    2976:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t LocalError = 1;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 milliVolt;
	uint8_t LM35_read;


	if((ptru8TempReading != NULL) && (channel >= 0)&&(channel <= 7)){
    297c:	8e 81       	ldd	r24, Y+6	; 0x06
    297e:	9f 81       	ldd	r25, Y+7	; 0x07
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	79 f0       	breq	.+30     	; 0x29a2 <LM35_u8GetTempSync+0x44>
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	88 30       	cpi	r24, 0x08	; 8
    2988:	60 f4       	brcc	.+24     	; 0x29a2 <LM35_u8GetTempSync+0x44>
		/*get the ADC read form LM35 */
		ADC_u8StartConversionSync(channel ,&LM35_read);
    298a:	9e 01       	movw	r18, r28
    298c:	2c 5f       	subi	r18, 0xFC	; 252
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	b9 01       	movw	r22, r18
    2994:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSync>

		/*calculate the temp note Vref in millivott = 5000 */

		//milliVolt = (uint16)((uint32)LM35_read * 5000UL)/256;

		*ptru8TempReading = LM35_read ;
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	ee 81       	ldd	r30, Y+6	; 0x06
    299c:	ff 81       	ldd	r31, Y+7	; 0x07
    299e:	80 83       	st	Z, r24
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <LM35_u8GetTempSync+0x46>

	}
	else{
		LocalError = 0;
    29a2:	1b 82       	std	Y+3, r1	; 0x03
	}
	return LocalError;
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    29a6:	27 96       	adiw	r28, 0x07	; 7
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <PORT_voidInit>:
#include "PORT_register.h"



void PORT_voidInit(void)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
	 DDRA = PORTA_DIR ;
    29c0:	ea e3       	ldi	r30, 0x3A	; 58
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	10 82       	st	Z, r1
	 DDRB = PORTB_DIR ;
    29c6:	e7 e3       	ldi	r30, 0x37	; 55
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	8f e0       	ldi	r24, 0x0F	; 15
    29cc:	80 83       	st	Z, r24
	 DDRC = PORTC_DIR ;
    29ce:	e4 e3       	ldi	r30, 0x34	; 52
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	8f ef       	ldi	r24, 0xFF	; 255
    29d4:	80 83       	st	Z, r24
	 DDRD = PORTD_DIR ;
    29d6:	e1 e3       	ldi	r30, 0x31	; 49
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	80 83       	st	Z, r24
	 
	 
	PORTA = PORTA_INIT_VAL; 
    29de:	eb e3       	ldi	r30, 0x3B	; 59
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL; 
    29e4:	e8 e3       	ldi	r30, 0x38	; 56
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	8f ef       	ldi	r24, 0xFF	; 255
    29ea:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL; 
    29ec:	e5 e3       	ldi	r30, 0x35	; 53
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL; 
    29f2:	e2 e3       	ldi	r30, 0x32	; 50
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	10 82       	st	Z, r1
	
}
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <PWM_Init>:
 *
 *@param none
 *
 *@return void
 */
void PWM_Init(void){
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62

	/*Choose the mode of PWM */

#if PWM_MODE == FAST_PWM_8Bit
	SET_BIT(TCCR1A,TCCR1A_WGM10);
    2a06:	af e4       	ldi	r26, 0x4F	; 79
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ef e4       	ldi	r30, 0x4F	; 79
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	81 60       	ori	r24, 0x01	; 1
    2a12:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2a14:	af e4       	ldi	r26, 0x4F	; 79
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ef e4       	ldi	r30, 0x4F	; 79
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8d 7f       	andi	r24, 0xFD	; 253
    2a20:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2a22:	ae e4       	ldi	r26, 0x4E	; 78
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	ee e4       	ldi	r30, 0x4E	; 78
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	87 7f       	andi	r24, 0xF7	; 247
    2a2e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2a30:	ae e4       	ldi	r26, 0x4E	; 78
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	ee e4       	ldi	r30, 0x4E	; 78
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 7e       	andi	r24, 0xEF	; 239
    2a3c:	8c 93       	st	X, r24
#endif

	/*Choose the channel and Action  */
#if PWM_CHANNEL == CHANNEL_A
#if COMPARE_OUT_MODE == CLR_ON_COMPARE_MATCH_SET_ON_TOP
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2a3e:	af e4       	ldi	r26, 0x4F	; 79
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	ef e4       	ldi	r30, 0x4F	; 79
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8f 7b       	andi	r24, 0xBF	; 191
    2a4a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2a4c:	af e4       	ldi	r26, 0x4F	; 79
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	ef e4       	ldi	r30, 0x4F	; 79
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	80 68       	ori	r24, 0x80	; 128
    2a58:	8c 93       	st	X, r24
#endif

#endif

	/* clear the bits that control clock source*/
	TCCR1B &= CLK_MASK;
    2a5a:	ae e4       	ldi	r26, 0x4E	; 78
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	ee e4       	ldi	r30, 0x4E	; 78
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	88 7f       	andi	r24, 0xF8	; 248
    2a66:	8c 93       	st	X, r24
	/* Set the clock source */
	TCCR1B |= CLOCK_SELECT;
    2a68:	ae e4       	ldi	r26, 0x4E	; 78
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	ee e4       	ldi	r30, 0x4E	; 78
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	82 60       	ori	r24, 0x02	; 2
    2a74:	8c 93       	st	X, r24

}
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <PWM_SetDutyCycleChannelA>:
 *@param DutyCycleValue
 *@param mode of pwm
 *
 *@return void
 */
void PWM_SetDutyCycleChannelA(uint8_t DutyCycleValue,PWM_mode_t Mode ){
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <PWM_SetDutyCycleChannelA+0xa>
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	6a 83       	std	Y+2, r22	; 0x02

	if(Mode == FAST_PWM_8Bit)
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	88 23       	and	r24, r24
    2a92:	59 f5       	brne	.+86     	; 0x2aea <PWM_SetDutyCycleChannelA+0x6e>
	{
		/* Set the value of  OCR1A */
		OCR1A = (255 * (( sfloat32_t)DutyCycleValue/100));
    2a94:	0a e4       	ldi	r16, 0x4A	; 74
    2a96:	10 e0       	ldi	r17, 0x00	; 0
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	48 ec       	ldi	r20, 0xC8	; 200
    2ab8:	52 e4       	ldi	r21, 0x42	; 66
    2aba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	53 e4       	ldi	r21, 0x43	; 67
    2ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	80 83       	st	Z, r24
    2ae8:	5b c0       	rjmp	.+182    	; 0x2ba0 <PWM_SetDutyCycleChannelA+0x124>
	}
	else if(Mode == FAST_PWM_9Bit)
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	59 f5       	brne	.+86     	; 0x2b46 <PWM_SetDutyCycleChannelA+0xca>
	{
		/* Set the value of  OCR1A */
		OCR1A = (511 * (( sfloat32_t)DutyCycleValue/100));
    2af0:	0a e4       	ldi	r16, 0x4A	; 74
    2af2:	10 e0       	ldi	r17, 0x00	; 0
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	48 ec       	ldi	r20, 0xC8	; 200
    2b14:	52 e4       	ldi	r21, 0x42	; 66
    2b16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e8       	ldi	r19, 0x80	; 128
    2b26:	4f ef       	ldi	r20, 0xFF	; 255
    2b28:	53 e4       	ldi	r21, 0x43	; 67
    2b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	f8 01       	movw	r30, r16
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
    2b44:	2d c0       	rjmp	.+90     	; 0x2ba0 <PWM_SetDutyCycleChannelA+0x124>
	}
	else if(Mode == FAST_PWM_10Bit)
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	82 30       	cpi	r24, 0x02	; 2
    2b4a:	51 f5       	brne	.+84     	; 0x2ba0 <PWM_SetDutyCycleChannelA+0x124>
		{
			/* Set the value of  OCR1A */
			OCR1A = (1023 * (( sfloat32_t)DutyCycleValue/100));
    2b4c:	0a e4       	ldi	r16, 0x4A	; 74
    2b4e:	10 e0       	ldi	r17, 0x00	; 0
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e0       	ldi	r26, 0x00	; 0
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	48 ec       	ldi	r20, 0xC8	; 200
    2b70:	52 e4       	ldi	r21, 0x42	; 66
    2b72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 ec       	ldi	r19, 0xC0	; 192
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	54 e4       	ldi	r21, 0x44	; 68
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
		}


}
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	08 95       	ret

00002bae <PWM_SetDutyCycleChannelB>:
 *
 * @param DutyCycleValue
 *
 * @return void
 */
void PWM_SetDutyCycleChannelB(uint8_t DutyCycleValue,PWM_mode_t Mode ){
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <PWM_SetDutyCycleChannelB+0xa>
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	6a 83       	std	Y+2, r22	; 0x02

	if(Mode == FAST_PWM_8Bit)
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	88 23       	and	r24, r24
    2bc4:	59 f5       	brne	.+86     	; 0x2c1c <PWM_SetDutyCycleChannelB+0x6e>
		{
			/* Set the value of  OCR1A */
			OCR1B = (255 * (( sfloat32_t)DutyCycleValue/100));
    2bc6:	08 e4       	ldi	r16, 0x48	; 72
    2bc8:	10 e0       	ldi	r17, 0x00	; 0
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a0 e0       	ldi	r26, 0x00	; 0
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	48 ec       	ldi	r20, 0xC8	; 200
    2bea:	52 e4       	ldi	r21, 0x42	; 66
    2bec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	4f e7       	ldi	r20, 0x7F	; 127
    2bfe:	53 e4       	ldi	r21, 0x43	; 67
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	f8 01       	movw	r30, r16
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
    2c1a:	5b c0       	rjmp	.+182    	; 0x2cd2 <PWM_SetDutyCycleChannelB+0x124>
		}
		else if(Mode == FAST_PWM_9Bit)
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	59 f5       	brne	.+86     	; 0x2c78 <PWM_SetDutyCycleChannelB+0xca>
		{
			/* Set the value of  OCR1A */
			OCR1B = (511 * (( sfloat32_t)DutyCycleValue/100));
    2c22:	08 e4       	ldi	r16, 0x48	; 72
    2c24:	10 e0       	ldi	r17, 0x00	; 0
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	88 2f       	mov	r24, r24
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	48 ec       	ldi	r20, 0xC8	; 200
    2c46:	52 e4       	ldi	r21, 0x42	; 66
    2c48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e8       	ldi	r19, 0x80	; 128
    2c58:	4f ef       	ldi	r20, 0xFF	; 255
    2c5a:	53 e4       	ldi	r21, 0x43	; 67
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	bc 01       	movw	r22, r24
    2c66:	cd 01       	movw	r24, r26
    2c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	f8 01       	movw	r30, r16
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    2c76:	2d c0       	rjmp	.+90     	; 0x2cd2 <PWM_SetDutyCycleChannelB+0x124>
		}
		else if(Mode == FAST_PWM_10Bit)
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	82 30       	cpi	r24, 0x02	; 2
    2c7c:	51 f5       	brne	.+84     	; 0x2cd2 <PWM_SetDutyCycleChannelB+0x124>
			{
				/* Set the value of  OCR1A */
				OCR1B = (1023 * (( sfloat32_t)DutyCycleValue/100));
    2c7e:	08 e4       	ldi	r16, 0x48	; 72
    2c80:	10 e0       	ldi	r17, 0x00	; 0
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e0       	ldi	r26, 0x00	; 0
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	bc 01       	movw	r22, r24
    2c9a:	cd 01       	movw	r24, r26
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	48 ec       	ldi	r20, 0xC8	; 200
    2ca2:	52 e4       	ldi	r21, 0x42	; 66
    2ca4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 ec       	ldi	r19, 0xC0	; 192
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	54 e4       	ldi	r21, 0x44	; 68
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	f8 01       	movw	r30, r16
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
			}
}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	08 95       	ret

00002ce0 <TIMER1_voidSetTimerValue>:



void TIMER1_voidSetTimerValue(uint16 Copy_u16Value)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <TIMER1_voidSetTimerValue+0x6>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    2cee:	ec e4       	ldi	r30, 0x4C	; 76
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <TIMER1_voidReadTimerValue>:

uint16 TIMER1_voidReadTimerValue(void)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2d0c:	ec e4       	ldi	r30, 0x4C	; 76
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
}
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <TIMER1_voidSetChannelACompareMatchVal>:

void TIMER1_voidSetChannelACompareMatchVal(uint16 Copy_u8Value)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <TIMER1_voidSetChannelACompareMatchVal+0x6>
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u8Value;
    2d28:	ea e4       	ldi	r30, 0x4A	; 74
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
}
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <main>:
 */

#include "App_interface.h"


void main(void){
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62


	App_Init();
    2d46:	0e 94 39 09 	call	0x1272	; 0x1272 <App_Init>


	while(1){

	App_Update();
    2d4a:	0e 94 4a 09 	call	0x1294	; 0x1294 <App_Update>
    2d4e:	fd cf       	rjmp	.-6      	; 0x2d4a <main+0xc>

00002d50 <__udivmodhi4>:
    2d50:	aa 1b       	sub	r26, r26
    2d52:	bb 1b       	sub	r27, r27
    2d54:	51 e1       	ldi	r21, 0x11	; 17
    2d56:	07 c0       	rjmp	.+14     	; 0x2d66 <__udivmodhi4_ep>

00002d58 <__udivmodhi4_loop>:
    2d58:	aa 1f       	adc	r26, r26
    2d5a:	bb 1f       	adc	r27, r27
    2d5c:	a6 17       	cp	r26, r22
    2d5e:	b7 07       	cpc	r27, r23
    2d60:	10 f0       	brcs	.+4      	; 0x2d66 <__udivmodhi4_ep>
    2d62:	a6 1b       	sub	r26, r22
    2d64:	b7 0b       	sbc	r27, r23

00002d66 <__udivmodhi4_ep>:
    2d66:	88 1f       	adc	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	5a 95       	dec	r21
    2d6c:	a9 f7       	brne	.-22     	; 0x2d58 <__udivmodhi4_loop>
    2d6e:	80 95       	com	r24
    2d70:	90 95       	com	r25
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	08 95       	ret

00002d78 <__prologue_saves__>:
    2d78:	2f 92       	push	r2
    2d7a:	3f 92       	push	r3
    2d7c:	4f 92       	push	r4
    2d7e:	5f 92       	push	r5
    2d80:	6f 92       	push	r6
    2d82:	7f 92       	push	r7
    2d84:	8f 92       	push	r8
    2d86:	9f 92       	push	r9
    2d88:	af 92       	push	r10
    2d8a:	bf 92       	push	r11
    2d8c:	cf 92       	push	r12
    2d8e:	df 92       	push	r13
    2d90:	ef 92       	push	r14
    2d92:	ff 92       	push	r15
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	ca 1b       	sub	r28, r26
    2da2:	db 0b       	sbc	r29, r27
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	09 94       	ijmp

00002db0 <__epilogue_restores__>:
    2db0:	2a 88       	ldd	r2, Y+18	; 0x12
    2db2:	39 88       	ldd	r3, Y+17	; 0x11
    2db4:	48 88       	ldd	r4, Y+16	; 0x10
    2db6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2db8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dba:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dc2:	b9 84       	ldd	r11, Y+9	; 0x09
    2dc4:	c8 84       	ldd	r12, Y+8	; 0x08
    2dc6:	df 80       	ldd	r13, Y+7	; 0x07
    2dc8:	ee 80       	ldd	r14, Y+6	; 0x06
    2dca:	fd 80       	ldd	r15, Y+5	; 0x05
    2dcc:	0c 81       	ldd	r16, Y+4	; 0x04
    2dce:	1b 81       	ldd	r17, Y+3	; 0x03
    2dd0:	aa 81       	ldd	r26, Y+2	; 0x02
    2dd2:	b9 81       	ldd	r27, Y+1	; 0x01
    2dd4:	ce 0f       	add	r28, r30
    2dd6:	d1 1d       	adc	r29, r1
    2dd8:	0f b6       	in	r0, 0x3f	; 63
    2dda:	f8 94       	cli
    2ddc:	de bf       	out	0x3e, r29	; 62
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	ed 01       	movw	r28, r26
    2de4:	08 95       	ret

00002de6 <_exit>:
    2de6:	f8 94       	cli

00002de8 <__stop_program>:
    2de8:	ff cf       	rjmp	.-2      	; 0x2de8 <__stop_program>
